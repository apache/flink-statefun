/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.io.statefun.sdk.reqreply.Address', null, global);
goog.exportSymbol('proto.io.statefun.sdk.reqreply.FromFunction', null, global);
goog.exportSymbol('proto.io.statefun.sdk.reqreply.FromFunction.DelayedInvocation', null, global);
goog.exportSymbol('proto.io.statefun.sdk.reqreply.FromFunction.EgressMessage', null, global);
goog.exportSymbol('proto.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec', null, global);
goog.exportSymbol('proto.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec.ExpireMode', null, global);
goog.exportSymbol('proto.io.statefun.sdk.reqreply.FromFunction.IncompleteInvocationContext', null, global);
goog.exportSymbol('proto.io.statefun.sdk.reqreply.FromFunction.Invocation', null, global);
goog.exportSymbol('proto.io.statefun.sdk.reqreply.FromFunction.InvocationResponse', null, global);
goog.exportSymbol('proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation', null, global);
goog.exportSymbol('proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation.MutationType', null, global);
goog.exportSymbol('proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec', null, global);
goog.exportSymbol('proto.io.statefun.sdk.reqreply.ToFunction', null, global);
goog.exportSymbol('proto.io.statefun.sdk.reqreply.ToFunction.Invocation', null, global);
goog.exportSymbol('proto.io.statefun.sdk.reqreply.ToFunction.InvocationBatchRequest', null, global);
goog.exportSymbol('proto.io.statefun.sdk.reqreply.ToFunction.PersistedValue', null, global);
goog.exportSymbol('proto.io.statefun.sdk.reqreply.TypedValue', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.statefun.sdk.reqreply.Address = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.statefun.sdk.reqreply.Address, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.statefun.sdk.reqreply.Address.displayName = 'proto.io.statefun.sdk.reqreply.Address';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.statefun.sdk.reqreply.TypedValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.statefun.sdk.reqreply.TypedValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.statefun.sdk.reqreply.TypedValue.displayName = 'proto.io.statefun.sdk.reqreply.TypedValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.statefun.sdk.reqreply.ToFunction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.io.statefun.sdk.reqreply.ToFunction.oneofGroups_);
};
goog.inherits(proto.io.statefun.sdk.reqreply.ToFunction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.statefun.sdk.reqreply.ToFunction.displayName = 'proto.io.statefun.sdk.reqreply.ToFunction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.statefun.sdk.reqreply.ToFunction.PersistedValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.statefun.sdk.reqreply.ToFunction.PersistedValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.statefun.sdk.reqreply.ToFunction.PersistedValue.displayName = 'proto.io.statefun.sdk.reqreply.ToFunction.PersistedValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.statefun.sdk.reqreply.ToFunction.Invocation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.statefun.sdk.reqreply.ToFunction.Invocation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.statefun.sdk.reqreply.ToFunction.Invocation.displayName = 'proto.io.statefun.sdk.reqreply.ToFunction.Invocation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.statefun.sdk.reqreply.ToFunction.InvocationBatchRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.statefun.sdk.reqreply.ToFunction.InvocationBatchRequest.repeatedFields_, null);
};
goog.inherits(proto.io.statefun.sdk.reqreply.ToFunction.InvocationBatchRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.statefun.sdk.reqreply.ToFunction.InvocationBatchRequest.displayName = 'proto.io.statefun.sdk.reqreply.ToFunction.InvocationBatchRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.statefun.sdk.reqreply.FromFunction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.io.statefun.sdk.reqreply.FromFunction.oneofGroups_);
};
goog.inherits(proto.io.statefun.sdk.reqreply.FromFunction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.statefun.sdk.reqreply.FromFunction.displayName = 'proto.io.statefun.sdk.reqreply.FromFunction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation.displayName = 'proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.statefun.sdk.reqreply.FromFunction.Invocation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.statefun.sdk.reqreply.FromFunction.Invocation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.statefun.sdk.reqreply.FromFunction.Invocation.displayName = 'proto.io.statefun.sdk.reqreply.FromFunction.Invocation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.statefun.sdk.reqreply.FromFunction.DelayedInvocation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.statefun.sdk.reqreply.FromFunction.DelayedInvocation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.statefun.sdk.reqreply.FromFunction.DelayedInvocation.displayName = 'proto.io.statefun.sdk.reqreply.FromFunction.DelayedInvocation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.statefun.sdk.reqreply.FromFunction.EgressMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.statefun.sdk.reqreply.FromFunction.EgressMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.statefun.sdk.reqreply.FromFunction.EgressMessage.displayName = 'proto.io.statefun.sdk.reqreply.FromFunction.EgressMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.statefun.sdk.reqreply.FromFunction.InvocationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.statefun.sdk.reqreply.FromFunction.InvocationResponse.repeatedFields_, null);
};
goog.inherits(proto.io.statefun.sdk.reqreply.FromFunction.InvocationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.statefun.sdk.reqreply.FromFunction.InvocationResponse.displayName = 'proto.io.statefun.sdk.reqreply.FromFunction.InvocationResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec.displayName = 'proto.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec.displayName = 'proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.statefun.sdk.reqreply.FromFunction.IncompleteInvocationContext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.statefun.sdk.reqreply.FromFunction.IncompleteInvocationContext.repeatedFields_, null);
};
goog.inherits(proto.io.statefun.sdk.reqreply.FromFunction.IncompleteInvocationContext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.statefun.sdk.reqreply.FromFunction.IncompleteInvocationContext.displayName = 'proto.io.statefun.sdk.reqreply.FromFunction.IncompleteInvocationContext';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.statefun.sdk.reqreply.Address.prototype.toObject = function(opt_includeInstance) {
  return proto.io.statefun.sdk.reqreply.Address.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.statefun.sdk.reqreply.Address} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.statefun.sdk.reqreply.Address.toObject = function(includeInstance, msg) {
  var f, obj = {
    namespace: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, ""),
    id: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.statefun.sdk.reqreply.Address}
 */
proto.io.statefun.sdk.reqreply.Address.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.statefun.sdk.reqreply.Address;
  return proto.io.statefun.sdk.reqreply.Address.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.statefun.sdk.reqreply.Address} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.statefun.sdk.reqreply.Address}
 */
proto.io.statefun.sdk.reqreply.Address.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.statefun.sdk.reqreply.Address.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.statefun.sdk.reqreply.Address.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.statefun.sdk.reqreply.Address} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.statefun.sdk.reqreply.Address.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string namespace = 1;
 * @return {string}
 */
proto.io.statefun.sdk.reqreply.Address.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.io.statefun.sdk.reqreply.Address.prototype.setNamespace = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string type = 2;
 * @return {string}
 */
proto.io.statefun.sdk.reqreply.Address.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.io.statefun.sdk.reqreply.Address.prototype.setType = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string id = 3;
 * @return {string}
 */
proto.io.statefun.sdk.reqreply.Address.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.io.statefun.sdk.reqreply.Address.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.statefun.sdk.reqreply.TypedValue.prototype.toObject = function(opt_includeInstance) {
  return proto.io.statefun.sdk.reqreply.TypedValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.statefun.sdk.reqreply.TypedValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.statefun.sdk.reqreply.TypedValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    typename: jspb.Message.getFieldWithDefault(msg, 1, ""),
    hasValue: jspb.Message.getFieldWithDefault(msg, 2, false),
    value: msg.getValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.statefun.sdk.reqreply.TypedValue}
 */
proto.io.statefun.sdk.reqreply.TypedValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.statefun.sdk.reqreply.TypedValue;
  return proto.io.statefun.sdk.reqreply.TypedValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.statefun.sdk.reqreply.TypedValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.statefun.sdk.reqreply.TypedValue}
 */
proto.io.statefun.sdk.reqreply.TypedValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTypename(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasValue(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.statefun.sdk.reqreply.TypedValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.statefun.sdk.reqreply.TypedValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.statefun.sdk.reqreply.TypedValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.statefun.sdk.reqreply.TypedValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTypename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHasValue();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional string typename = 1;
 * @return {string}
 */
proto.io.statefun.sdk.reqreply.TypedValue.prototype.getTypename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.io.statefun.sdk.reqreply.TypedValue.prototype.setTypename = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool has_value = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.io.statefun.sdk.reqreply.TypedValue.prototype.getHasValue = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.io.statefun.sdk.reqreply.TypedValue.prototype.setHasValue = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bytes value = 3;
 * @return {!(string|Uint8Array)}
 */
proto.io.statefun.sdk.reqreply.TypedValue.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes value = 3;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.io.statefun.sdk.reqreply.TypedValue.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.io.statefun.sdk.reqreply.TypedValue.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/** @param {!(string|Uint8Array)} value */
proto.io.statefun.sdk.reqreply.TypedValue.prototype.setValue = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.io.statefun.sdk.reqreply.ToFunction.oneofGroups_ = [[100]];

/**
 * @enum {number}
 */
proto.io.statefun.sdk.reqreply.ToFunction.RequestCase = {
  REQUEST_NOT_SET: 0,
  INVOCATION: 100
};

/**
 * @return {proto.io.statefun.sdk.reqreply.ToFunction.RequestCase}
 */
proto.io.statefun.sdk.reqreply.ToFunction.prototype.getRequestCase = function() {
  return /** @type {proto.io.statefun.sdk.reqreply.ToFunction.RequestCase} */(jspb.Message.computeOneofCase(this, proto.io.statefun.sdk.reqreply.ToFunction.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.statefun.sdk.reqreply.ToFunction.prototype.toObject = function(opt_includeInstance) {
  return proto.io.statefun.sdk.reqreply.ToFunction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.statefun.sdk.reqreply.ToFunction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.statefun.sdk.reqreply.ToFunction.toObject = function(includeInstance, msg) {
  var f, obj = {
    invocation: (f = msg.getInvocation()) && proto.io.statefun.sdk.reqreply.ToFunction.InvocationBatchRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.statefun.sdk.reqreply.ToFunction}
 */
proto.io.statefun.sdk.reqreply.ToFunction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.statefun.sdk.reqreply.ToFunction;
  return proto.io.statefun.sdk.reqreply.ToFunction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.statefun.sdk.reqreply.ToFunction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.statefun.sdk.reqreply.ToFunction}
 */
proto.io.statefun.sdk.reqreply.ToFunction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = new proto.io.statefun.sdk.reqreply.ToFunction.InvocationBatchRequest;
      reader.readMessage(value,proto.io.statefun.sdk.reqreply.ToFunction.InvocationBatchRequest.deserializeBinaryFromReader);
      msg.setInvocation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.statefun.sdk.reqreply.ToFunction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.statefun.sdk.reqreply.ToFunction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.statefun.sdk.reqreply.ToFunction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.statefun.sdk.reqreply.ToFunction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInvocation();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      proto.io.statefun.sdk.reqreply.ToFunction.InvocationBatchRequest.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.statefun.sdk.reqreply.ToFunction.PersistedValue.prototype.toObject = function(opt_includeInstance) {
  return proto.io.statefun.sdk.reqreply.ToFunction.PersistedValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.statefun.sdk.reqreply.ToFunction.PersistedValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.statefun.sdk.reqreply.ToFunction.PersistedValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    stateName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    stateValue: (f = msg.getStateValue()) && proto.io.statefun.sdk.reqreply.TypedValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.statefun.sdk.reqreply.ToFunction.PersistedValue}
 */
proto.io.statefun.sdk.reqreply.ToFunction.PersistedValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.statefun.sdk.reqreply.ToFunction.PersistedValue;
  return proto.io.statefun.sdk.reqreply.ToFunction.PersistedValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.statefun.sdk.reqreply.ToFunction.PersistedValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.statefun.sdk.reqreply.ToFunction.PersistedValue}
 */
proto.io.statefun.sdk.reqreply.ToFunction.PersistedValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStateName(value);
      break;
    case 2:
      var value = new proto.io.statefun.sdk.reqreply.TypedValue;
      reader.readMessage(value,proto.io.statefun.sdk.reqreply.TypedValue.deserializeBinaryFromReader);
      msg.setStateValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.statefun.sdk.reqreply.ToFunction.PersistedValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.statefun.sdk.reqreply.ToFunction.PersistedValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.statefun.sdk.reqreply.ToFunction.PersistedValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.statefun.sdk.reqreply.ToFunction.PersistedValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStateName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStateValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.io.statefun.sdk.reqreply.TypedValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional string state_name = 1;
 * @return {string}
 */
proto.io.statefun.sdk.reqreply.ToFunction.PersistedValue.prototype.getStateName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.io.statefun.sdk.reqreply.ToFunction.PersistedValue.prototype.setStateName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional TypedValue state_value = 2;
 * @return {?proto.io.statefun.sdk.reqreply.TypedValue}
 */
proto.io.statefun.sdk.reqreply.ToFunction.PersistedValue.prototype.getStateValue = function() {
  return /** @type{?proto.io.statefun.sdk.reqreply.TypedValue} */ (
    jspb.Message.getWrapperField(this, proto.io.statefun.sdk.reqreply.TypedValue, 2));
};


/** @param {?proto.io.statefun.sdk.reqreply.TypedValue|undefined} value */
proto.io.statefun.sdk.reqreply.ToFunction.PersistedValue.prototype.setStateValue = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.io.statefun.sdk.reqreply.ToFunction.PersistedValue.prototype.clearStateValue = function() {
  this.setStateValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.statefun.sdk.reqreply.ToFunction.PersistedValue.prototype.hasStateValue = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.statefun.sdk.reqreply.ToFunction.Invocation.prototype.toObject = function(opt_includeInstance) {
  return proto.io.statefun.sdk.reqreply.ToFunction.Invocation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.statefun.sdk.reqreply.ToFunction.Invocation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.statefun.sdk.reqreply.ToFunction.Invocation.toObject = function(includeInstance, msg) {
  var f, obj = {
    caller: (f = msg.getCaller()) && proto.io.statefun.sdk.reqreply.Address.toObject(includeInstance, f),
    argument: (f = msg.getArgument()) && proto.io.statefun.sdk.reqreply.TypedValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.statefun.sdk.reqreply.ToFunction.Invocation}
 */
proto.io.statefun.sdk.reqreply.ToFunction.Invocation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.statefun.sdk.reqreply.ToFunction.Invocation;
  return proto.io.statefun.sdk.reqreply.ToFunction.Invocation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.statefun.sdk.reqreply.ToFunction.Invocation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.statefun.sdk.reqreply.ToFunction.Invocation}
 */
proto.io.statefun.sdk.reqreply.ToFunction.Invocation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.io.statefun.sdk.reqreply.Address;
      reader.readMessage(value,proto.io.statefun.sdk.reqreply.Address.deserializeBinaryFromReader);
      msg.setCaller(value);
      break;
    case 2:
      var value = new proto.io.statefun.sdk.reqreply.TypedValue;
      reader.readMessage(value,proto.io.statefun.sdk.reqreply.TypedValue.deserializeBinaryFromReader);
      msg.setArgument(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.statefun.sdk.reqreply.ToFunction.Invocation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.statefun.sdk.reqreply.ToFunction.Invocation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.statefun.sdk.reqreply.ToFunction.Invocation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.statefun.sdk.reqreply.ToFunction.Invocation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCaller();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.io.statefun.sdk.reqreply.Address.serializeBinaryToWriter
    );
  }
  f = message.getArgument();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.io.statefun.sdk.reqreply.TypedValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional Address caller = 1;
 * @return {?proto.io.statefun.sdk.reqreply.Address}
 */
proto.io.statefun.sdk.reqreply.ToFunction.Invocation.prototype.getCaller = function() {
  return /** @type{?proto.io.statefun.sdk.reqreply.Address} */ (
    jspb.Message.getWrapperField(this, proto.io.statefun.sdk.reqreply.Address, 1));
};


/** @param {?proto.io.statefun.sdk.reqreply.Address|undefined} value */
proto.io.statefun.sdk.reqreply.ToFunction.Invocation.prototype.setCaller = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.io.statefun.sdk.reqreply.ToFunction.Invocation.prototype.clearCaller = function() {
  this.setCaller(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.statefun.sdk.reqreply.ToFunction.Invocation.prototype.hasCaller = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TypedValue argument = 2;
 * @return {?proto.io.statefun.sdk.reqreply.TypedValue}
 */
proto.io.statefun.sdk.reqreply.ToFunction.Invocation.prototype.getArgument = function() {
  return /** @type{?proto.io.statefun.sdk.reqreply.TypedValue} */ (
    jspb.Message.getWrapperField(this, proto.io.statefun.sdk.reqreply.TypedValue, 2));
};


/** @param {?proto.io.statefun.sdk.reqreply.TypedValue|undefined} value */
proto.io.statefun.sdk.reqreply.ToFunction.Invocation.prototype.setArgument = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.io.statefun.sdk.reqreply.ToFunction.Invocation.prototype.clearArgument = function() {
  this.setArgument(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.statefun.sdk.reqreply.ToFunction.Invocation.prototype.hasArgument = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.statefun.sdk.reqreply.ToFunction.InvocationBatchRequest.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.statefun.sdk.reqreply.ToFunction.InvocationBatchRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.io.statefun.sdk.reqreply.ToFunction.InvocationBatchRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.statefun.sdk.reqreply.ToFunction.InvocationBatchRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.statefun.sdk.reqreply.ToFunction.InvocationBatchRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    target: (f = msg.getTarget()) && proto.io.statefun.sdk.reqreply.Address.toObject(includeInstance, f),
    stateList: jspb.Message.toObjectList(msg.getStateList(),
    proto.io.statefun.sdk.reqreply.ToFunction.PersistedValue.toObject, includeInstance),
    invocationsList: jspb.Message.toObjectList(msg.getInvocationsList(),
    proto.io.statefun.sdk.reqreply.ToFunction.Invocation.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.statefun.sdk.reqreply.ToFunction.InvocationBatchRequest}
 */
proto.io.statefun.sdk.reqreply.ToFunction.InvocationBatchRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.statefun.sdk.reqreply.ToFunction.InvocationBatchRequest;
  return proto.io.statefun.sdk.reqreply.ToFunction.InvocationBatchRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.statefun.sdk.reqreply.ToFunction.InvocationBatchRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.statefun.sdk.reqreply.ToFunction.InvocationBatchRequest}
 */
proto.io.statefun.sdk.reqreply.ToFunction.InvocationBatchRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.io.statefun.sdk.reqreply.Address;
      reader.readMessage(value,proto.io.statefun.sdk.reqreply.Address.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    case 2:
      var value = new proto.io.statefun.sdk.reqreply.ToFunction.PersistedValue;
      reader.readMessage(value,proto.io.statefun.sdk.reqreply.ToFunction.PersistedValue.deserializeBinaryFromReader);
      msg.addState(value);
      break;
    case 3:
      var value = new proto.io.statefun.sdk.reqreply.ToFunction.Invocation;
      reader.readMessage(value,proto.io.statefun.sdk.reqreply.ToFunction.Invocation.deserializeBinaryFromReader);
      msg.addInvocations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.statefun.sdk.reqreply.ToFunction.InvocationBatchRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.statefun.sdk.reqreply.ToFunction.InvocationBatchRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.statefun.sdk.reqreply.ToFunction.InvocationBatchRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.statefun.sdk.reqreply.ToFunction.InvocationBatchRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTarget();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.io.statefun.sdk.reqreply.Address.serializeBinaryToWriter
    );
  }
  f = message.getStateList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.io.statefun.sdk.reqreply.ToFunction.PersistedValue.serializeBinaryToWriter
    );
  }
  f = message.getInvocationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.io.statefun.sdk.reqreply.ToFunction.Invocation.serializeBinaryToWriter
    );
  }
};


/**
 * optional Address target = 1;
 * @return {?proto.io.statefun.sdk.reqreply.Address}
 */
proto.io.statefun.sdk.reqreply.ToFunction.InvocationBatchRequest.prototype.getTarget = function() {
  return /** @type{?proto.io.statefun.sdk.reqreply.Address} */ (
    jspb.Message.getWrapperField(this, proto.io.statefun.sdk.reqreply.Address, 1));
};


/** @param {?proto.io.statefun.sdk.reqreply.Address|undefined} value */
proto.io.statefun.sdk.reqreply.ToFunction.InvocationBatchRequest.prototype.setTarget = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.io.statefun.sdk.reqreply.ToFunction.InvocationBatchRequest.prototype.clearTarget = function() {
  this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.statefun.sdk.reqreply.ToFunction.InvocationBatchRequest.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated PersistedValue state = 2;
 * @return {!Array<!proto.io.statefun.sdk.reqreply.ToFunction.PersistedValue>}
 */
proto.io.statefun.sdk.reqreply.ToFunction.InvocationBatchRequest.prototype.getStateList = function() {
  return /** @type{!Array<!proto.io.statefun.sdk.reqreply.ToFunction.PersistedValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.io.statefun.sdk.reqreply.ToFunction.PersistedValue, 2));
};


/** @param {!Array<!proto.io.statefun.sdk.reqreply.ToFunction.PersistedValue>} value */
proto.io.statefun.sdk.reqreply.ToFunction.InvocationBatchRequest.prototype.setStateList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.io.statefun.sdk.reqreply.ToFunction.PersistedValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.io.statefun.sdk.reqreply.ToFunction.PersistedValue}
 */
proto.io.statefun.sdk.reqreply.ToFunction.InvocationBatchRequest.prototype.addState = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.io.statefun.sdk.reqreply.ToFunction.PersistedValue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.io.statefun.sdk.reqreply.ToFunction.InvocationBatchRequest.prototype.clearStateList = function() {
  this.setStateList([]);
};


/**
 * repeated Invocation invocations = 3;
 * @return {!Array<!proto.io.statefun.sdk.reqreply.ToFunction.Invocation>}
 */
proto.io.statefun.sdk.reqreply.ToFunction.InvocationBatchRequest.prototype.getInvocationsList = function() {
  return /** @type{!Array<!proto.io.statefun.sdk.reqreply.ToFunction.Invocation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.io.statefun.sdk.reqreply.ToFunction.Invocation, 3));
};


/** @param {!Array<!proto.io.statefun.sdk.reqreply.ToFunction.Invocation>} value */
proto.io.statefun.sdk.reqreply.ToFunction.InvocationBatchRequest.prototype.setInvocationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.io.statefun.sdk.reqreply.ToFunction.Invocation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.io.statefun.sdk.reqreply.ToFunction.Invocation}
 */
proto.io.statefun.sdk.reqreply.ToFunction.InvocationBatchRequest.prototype.addInvocations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.io.statefun.sdk.reqreply.ToFunction.Invocation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.io.statefun.sdk.reqreply.ToFunction.InvocationBatchRequest.prototype.clearInvocationsList = function() {
  this.setInvocationsList([]);
};


/**
 * optional InvocationBatchRequest invocation = 100;
 * @return {?proto.io.statefun.sdk.reqreply.ToFunction.InvocationBatchRequest}
 */
proto.io.statefun.sdk.reqreply.ToFunction.prototype.getInvocation = function() {
  return /** @type{?proto.io.statefun.sdk.reqreply.ToFunction.InvocationBatchRequest} */ (
    jspb.Message.getWrapperField(this, proto.io.statefun.sdk.reqreply.ToFunction.InvocationBatchRequest, 100));
};


/** @param {?proto.io.statefun.sdk.reqreply.ToFunction.InvocationBatchRequest|undefined} value */
proto.io.statefun.sdk.reqreply.ToFunction.prototype.setInvocation = function(value) {
  jspb.Message.setOneofWrapperField(this, 100, proto.io.statefun.sdk.reqreply.ToFunction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.io.statefun.sdk.reqreply.ToFunction.prototype.clearInvocation = function() {
  this.setInvocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.statefun.sdk.reqreply.ToFunction.prototype.hasInvocation = function() {
  return jspb.Message.getField(this, 100) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.io.statefun.sdk.reqreply.FromFunction.oneofGroups_ = [[100,101]];

/**
 * @enum {number}
 */
proto.io.statefun.sdk.reqreply.FromFunction.ResponseCase = {
  RESPONSE_NOT_SET: 0,
  INVOCATION_RESULT: 100,
  INCOMPLETE_INVOCATION_CONTEXT: 101
};

/**
 * @return {proto.io.statefun.sdk.reqreply.FromFunction.ResponseCase}
 */
proto.io.statefun.sdk.reqreply.FromFunction.prototype.getResponseCase = function() {
  return /** @type {proto.io.statefun.sdk.reqreply.FromFunction.ResponseCase} */(jspb.Message.computeOneofCase(this, proto.io.statefun.sdk.reqreply.FromFunction.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.statefun.sdk.reqreply.FromFunction.prototype.toObject = function(opt_includeInstance) {
  return proto.io.statefun.sdk.reqreply.FromFunction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.statefun.sdk.reqreply.FromFunction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.statefun.sdk.reqreply.FromFunction.toObject = function(includeInstance, msg) {
  var f, obj = {
    invocationResult: (f = msg.getInvocationResult()) && proto.io.statefun.sdk.reqreply.FromFunction.InvocationResponse.toObject(includeInstance, f),
    incompleteInvocationContext: (f = msg.getIncompleteInvocationContext()) && proto.io.statefun.sdk.reqreply.FromFunction.IncompleteInvocationContext.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.statefun.sdk.reqreply.FromFunction}
 */
proto.io.statefun.sdk.reqreply.FromFunction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.statefun.sdk.reqreply.FromFunction;
  return proto.io.statefun.sdk.reqreply.FromFunction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.statefun.sdk.reqreply.FromFunction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.statefun.sdk.reqreply.FromFunction}
 */
proto.io.statefun.sdk.reqreply.FromFunction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = new proto.io.statefun.sdk.reqreply.FromFunction.InvocationResponse;
      reader.readMessage(value,proto.io.statefun.sdk.reqreply.FromFunction.InvocationResponse.deserializeBinaryFromReader);
      msg.setInvocationResult(value);
      break;
    case 101:
      var value = new proto.io.statefun.sdk.reqreply.FromFunction.IncompleteInvocationContext;
      reader.readMessage(value,proto.io.statefun.sdk.reqreply.FromFunction.IncompleteInvocationContext.deserializeBinaryFromReader);
      msg.setIncompleteInvocationContext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.statefun.sdk.reqreply.FromFunction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.statefun.sdk.reqreply.FromFunction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.statefun.sdk.reqreply.FromFunction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.statefun.sdk.reqreply.FromFunction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInvocationResult();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      proto.io.statefun.sdk.reqreply.FromFunction.InvocationResponse.serializeBinaryToWriter
    );
  }
  f = message.getIncompleteInvocationContext();
  if (f != null) {
    writer.writeMessage(
      101,
      f,
      proto.io.statefun.sdk.reqreply.FromFunction.IncompleteInvocationContext.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation.prototype.toObject = function(opt_includeInstance) {
  return proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation.toObject = function(includeInstance, msg) {
  var f, obj = {
    mutationType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    stateName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    stateValue: (f = msg.getStateValue()) && proto.io.statefun.sdk.reqreply.TypedValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation}
 */
proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation;
  return proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation}
 */
proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation.MutationType} */ (reader.readEnum());
      msg.setMutationType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStateName(value);
      break;
    case 3:
      var value = new proto.io.statefun.sdk.reqreply.TypedValue;
      reader.readMessage(value,proto.io.statefun.sdk.reqreply.TypedValue.deserializeBinaryFromReader);
      msg.setStateValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMutationType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getStateName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStateValue();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.io.statefun.sdk.reqreply.TypedValue.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation.MutationType = {
  DELETE: 0,
  MODIFY: 1
};

/**
 * optional MutationType mutation_type = 1;
 * @return {!proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation.MutationType}
 */
proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation.prototype.getMutationType = function() {
  return /** @type {!proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation.MutationType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation.MutationType} value */
proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation.prototype.setMutationType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string state_name = 2;
 * @return {string}
 */
proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation.prototype.getStateName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation.prototype.setStateName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional TypedValue state_value = 3;
 * @return {?proto.io.statefun.sdk.reqreply.TypedValue}
 */
proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation.prototype.getStateValue = function() {
  return /** @type{?proto.io.statefun.sdk.reqreply.TypedValue} */ (
    jspb.Message.getWrapperField(this, proto.io.statefun.sdk.reqreply.TypedValue, 3));
};


/** @param {?proto.io.statefun.sdk.reqreply.TypedValue|undefined} value */
proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation.prototype.setStateValue = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation.prototype.clearStateValue = function() {
  this.setStateValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation.prototype.hasStateValue = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.statefun.sdk.reqreply.FromFunction.Invocation.prototype.toObject = function(opt_includeInstance) {
  return proto.io.statefun.sdk.reqreply.FromFunction.Invocation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.statefun.sdk.reqreply.FromFunction.Invocation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.statefun.sdk.reqreply.FromFunction.Invocation.toObject = function(includeInstance, msg) {
  var f, obj = {
    target: (f = msg.getTarget()) && proto.io.statefun.sdk.reqreply.Address.toObject(includeInstance, f),
    argument: (f = msg.getArgument()) && proto.io.statefun.sdk.reqreply.TypedValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.statefun.sdk.reqreply.FromFunction.Invocation}
 */
proto.io.statefun.sdk.reqreply.FromFunction.Invocation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.statefun.sdk.reqreply.FromFunction.Invocation;
  return proto.io.statefun.sdk.reqreply.FromFunction.Invocation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.statefun.sdk.reqreply.FromFunction.Invocation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.statefun.sdk.reqreply.FromFunction.Invocation}
 */
proto.io.statefun.sdk.reqreply.FromFunction.Invocation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.io.statefun.sdk.reqreply.Address;
      reader.readMessage(value,proto.io.statefun.sdk.reqreply.Address.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    case 2:
      var value = new proto.io.statefun.sdk.reqreply.TypedValue;
      reader.readMessage(value,proto.io.statefun.sdk.reqreply.TypedValue.deserializeBinaryFromReader);
      msg.setArgument(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.statefun.sdk.reqreply.FromFunction.Invocation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.statefun.sdk.reqreply.FromFunction.Invocation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.statefun.sdk.reqreply.FromFunction.Invocation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.statefun.sdk.reqreply.FromFunction.Invocation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTarget();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.io.statefun.sdk.reqreply.Address.serializeBinaryToWriter
    );
  }
  f = message.getArgument();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.io.statefun.sdk.reqreply.TypedValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional Address target = 1;
 * @return {?proto.io.statefun.sdk.reqreply.Address}
 */
proto.io.statefun.sdk.reqreply.FromFunction.Invocation.prototype.getTarget = function() {
  return /** @type{?proto.io.statefun.sdk.reqreply.Address} */ (
    jspb.Message.getWrapperField(this, proto.io.statefun.sdk.reqreply.Address, 1));
};


/** @param {?proto.io.statefun.sdk.reqreply.Address|undefined} value */
proto.io.statefun.sdk.reqreply.FromFunction.Invocation.prototype.setTarget = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.io.statefun.sdk.reqreply.FromFunction.Invocation.prototype.clearTarget = function() {
  this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.statefun.sdk.reqreply.FromFunction.Invocation.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TypedValue argument = 2;
 * @return {?proto.io.statefun.sdk.reqreply.TypedValue}
 */
proto.io.statefun.sdk.reqreply.FromFunction.Invocation.prototype.getArgument = function() {
  return /** @type{?proto.io.statefun.sdk.reqreply.TypedValue} */ (
    jspb.Message.getWrapperField(this, proto.io.statefun.sdk.reqreply.TypedValue, 2));
};


/** @param {?proto.io.statefun.sdk.reqreply.TypedValue|undefined} value */
proto.io.statefun.sdk.reqreply.FromFunction.Invocation.prototype.setArgument = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.io.statefun.sdk.reqreply.FromFunction.Invocation.prototype.clearArgument = function() {
  this.setArgument(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.statefun.sdk.reqreply.FromFunction.Invocation.prototype.hasArgument = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.statefun.sdk.reqreply.FromFunction.DelayedInvocation.prototype.toObject = function(opt_includeInstance) {
  return proto.io.statefun.sdk.reqreply.FromFunction.DelayedInvocation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.statefun.sdk.reqreply.FromFunction.DelayedInvocation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.statefun.sdk.reqreply.FromFunction.DelayedInvocation.toObject = function(includeInstance, msg) {
  var f, obj = {
    isCancellationRequest: jspb.Message.getFieldWithDefault(msg, 10, false),
    cancellationToken: jspb.Message.getFieldWithDefault(msg, 11, ""),
    delayInMs: jspb.Message.getFieldWithDefault(msg, 1, 0),
    target: (f = msg.getTarget()) && proto.io.statefun.sdk.reqreply.Address.toObject(includeInstance, f),
    argument: (f = msg.getArgument()) && proto.io.statefun.sdk.reqreply.TypedValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.statefun.sdk.reqreply.FromFunction.DelayedInvocation}
 */
proto.io.statefun.sdk.reqreply.FromFunction.DelayedInvocation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.statefun.sdk.reqreply.FromFunction.DelayedInvocation;
  return proto.io.statefun.sdk.reqreply.FromFunction.DelayedInvocation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.statefun.sdk.reqreply.FromFunction.DelayedInvocation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.statefun.sdk.reqreply.FromFunction.DelayedInvocation}
 */
proto.io.statefun.sdk.reqreply.FromFunction.DelayedInvocation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsCancellationRequest(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setCancellationToken(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDelayInMs(value);
      break;
    case 2:
      var value = new proto.io.statefun.sdk.reqreply.Address;
      reader.readMessage(value,proto.io.statefun.sdk.reqreply.Address.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    case 3:
      var value = new proto.io.statefun.sdk.reqreply.TypedValue;
      reader.readMessage(value,proto.io.statefun.sdk.reqreply.TypedValue.deserializeBinaryFromReader);
      msg.setArgument(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.statefun.sdk.reqreply.FromFunction.DelayedInvocation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.statefun.sdk.reqreply.FromFunction.DelayedInvocation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.statefun.sdk.reqreply.FromFunction.DelayedInvocation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.statefun.sdk.reqreply.FromFunction.DelayedInvocation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsCancellationRequest();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getCancellationToken();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getDelayInMs();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getTarget();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.io.statefun.sdk.reqreply.Address.serializeBinaryToWriter
    );
  }
  f = message.getArgument();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.io.statefun.sdk.reqreply.TypedValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool is_cancellation_request = 10;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.io.statefun.sdk.reqreply.FromFunction.DelayedInvocation.prototype.getIsCancellationRequest = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 10, false));
};


/** @param {boolean} value */
proto.io.statefun.sdk.reqreply.FromFunction.DelayedInvocation.prototype.setIsCancellationRequest = function(value) {
  jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional string cancellation_token = 11;
 * @return {string}
 */
proto.io.statefun.sdk.reqreply.FromFunction.DelayedInvocation.prototype.getCancellationToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.io.statefun.sdk.reqreply.FromFunction.DelayedInvocation.prototype.setCancellationToken = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional int64 delay_in_ms = 1;
 * @return {number}
 */
proto.io.statefun.sdk.reqreply.FromFunction.DelayedInvocation.prototype.getDelayInMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.io.statefun.sdk.reqreply.FromFunction.DelayedInvocation.prototype.setDelayInMs = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Address target = 2;
 * @return {?proto.io.statefun.sdk.reqreply.Address}
 */
proto.io.statefun.sdk.reqreply.FromFunction.DelayedInvocation.prototype.getTarget = function() {
  return /** @type{?proto.io.statefun.sdk.reqreply.Address} */ (
    jspb.Message.getWrapperField(this, proto.io.statefun.sdk.reqreply.Address, 2));
};


/** @param {?proto.io.statefun.sdk.reqreply.Address|undefined} value */
proto.io.statefun.sdk.reqreply.FromFunction.DelayedInvocation.prototype.setTarget = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.io.statefun.sdk.reqreply.FromFunction.DelayedInvocation.prototype.clearTarget = function() {
  this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.statefun.sdk.reqreply.FromFunction.DelayedInvocation.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TypedValue argument = 3;
 * @return {?proto.io.statefun.sdk.reqreply.TypedValue}
 */
proto.io.statefun.sdk.reqreply.FromFunction.DelayedInvocation.prototype.getArgument = function() {
  return /** @type{?proto.io.statefun.sdk.reqreply.TypedValue} */ (
    jspb.Message.getWrapperField(this, proto.io.statefun.sdk.reqreply.TypedValue, 3));
};


/** @param {?proto.io.statefun.sdk.reqreply.TypedValue|undefined} value */
proto.io.statefun.sdk.reqreply.FromFunction.DelayedInvocation.prototype.setArgument = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.io.statefun.sdk.reqreply.FromFunction.DelayedInvocation.prototype.clearArgument = function() {
  this.setArgument(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.statefun.sdk.reqreply.FromFunction.DelayedInvocation.prototype.hasArgument = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.statefun.sdk.reqreply.FromFunction.EgressMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.io.statefun.sdk.reqreply.FromFunction.EgressMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.statefun.sdk.reqreply.FromFunction.EgressMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.statefun.sdk.reqreply.FromFunction.EgressMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    egressNamespace: jspb.Message.getFieldWithDefault(msg, 1, ""),
    egressType: jspb.Message.getFieldWithDefault(msg, 2, ""),
    argument: (f = msg.getArgument()) && proto.io.statefun.sdk.reqreply.TypedValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.statefun.sdk.reqreply.FromFunction.EgressMessage}
 */
proto.io.statefun.sdk.reqreply.FromFunction.EgressMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.statefun.sdk.reqreply.FromFunction.EgressMessage;
  return proto.io.statefun.sdk.reqreply.FromFunction.EgressMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.statefun.sdk.reqreply.FromFunction.EgressMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.statefun.sdk.reqreply.FromFunction.EgressMessage}
 */
proto.io.statefun.sdk.reqreply.FromFunction.EgressMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEgressNamespace(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEgressType(value);
      break;
    case 3:
      var value = new proto.io.statefun.sdk.reqreply.TypedValue;
      reader.readMessage(value,proto.io.statefun.sdk.reqreply.TypedValue.deserializeBinaryFromReader);
      msg.setArgument(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.statefun.sdk.reqreply.FromFunction.EgressMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.statefun.sdk.reqreply.FromFunction.EgressMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.statefun.sdk.reqreply.FromFunction.EgressMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.statefun.sdk.reqreply.FromFunction.EgressMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEgressNamespace();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEgressType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getArgument();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.io.statefun.sdk.reqreply.TypedValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional string egress_namespace = 1;
 * @return {string}
 */
proto.io.statefun.sdk.reqreply.FromFunction.EgressMessage.prototype.getEgressNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.io.statefun.sdk.reqreply.FromFunction.EgressMessage.prototype.setEgressNamespace = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string egress_type = 2;
 * @return {string}
 */
proto.io.statefun.sdk.reqreply.FromFunction.EgressMessage.prototype.getEgressType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.io.statefun.sdk.reqreply.FromFunction.EgressMessage.prototype.setEgressType = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional TypedValue argument = 3;
 * @return {?proto.io.statefun.sdk.reqreply.TypedValue}
 */
proto.io.statefun.sdk.reqreply.FromFunction.EgressMessage.prototype.getArgument = function() {
  return /** @type{?proto.io.statefun.sdk.reqreply.TypedValue} */ (
    jspb.Message.getWrapperField(this, proto.io.statefun.sdk.reqreply.TypedValue, 3));
};


/** @param {?proto.io.statefun.sdk.reqreply.TypedValue|undefined} value */
proto.io.statefun.sdk.reqreply.FromFunction.EgressMessage.prototype.setArgument = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.io.statefun.sdk.reqreply.FromFunction.EgressMessage.prototype.clearArgument = function() {
  this.setArgument(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.statefun.sdk.reqreply.FromFunction.EgressMessage.prototype.hasArgument = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.statefun.sdk.reqreply.FromFunction.InvocationResponse.repeatedFields_ = [1,2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.statefun.sdk.reqreply.FromFunction.InvocationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.io.statefun.sdk.reqreply.FromFunction.InvocationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.statefun.sdk.reqreply.FromFunction.InvocationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.statefun.sdk.reqreply.FromFunction.InvocationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    stateMutationsList: jspb.Message.toObjectList(msg.getStateMutationsList(),
    proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation.toObject, includeInstance),
    outgoingMessagesList: jspb.Message.toObjectList(msg.getOutgoingMessagesList(),
    proto.io.statefun.sdk.reqreply.FromFunction.Invocation.toObject, includeInstance),
    delayedInvocationsList: jspb.Message.toObjectList(msg.getDelayedInvocationsList(),
    proto.io.statefun.sdk.reqreply.FromFunction.DelayedInvocation.toObject, includeInstance),
    outgoingEgressesList: jspb.Message.toObjectList(msg.getOutgoingEgressesList(),
    proto.io.statefun.sdk.reqreply.FromFunction.EgressMessage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.statefun.sdk.reqreply.FromFunction.InvocationResponse}
 */
proto.io.statefun.sdk.reqreply.FromFunction.InvocationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.statefun.sdk.reqreply.FromFunction.InvocationResponse;
  return proto.io.statefun.sdk.reqreply.FromFunction.InvocationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.statefun.sdk.reqreply.FromFunction.InvocationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.statefun.sdk.reqreply.FromFunction.InvocationResponse}
 */
proto.io.statefun.sdk.reqreply.FromFunction.InvocationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation;
      reader.readMessage(value,proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation.deserializeBinaryFromReader);
      msg.addStateMutations(value);
      break;
    case 2:
      var value = new proto.io.statefun.sdk.reqreply.FromFunction.Invocation;
      reader.readMessage(value,proto.io.statefun.sdk.reqreply.FromFunction.Invocation.deserializeBinaryFromReader);
      msg.addOutgoingMessages(value);
      break;
    case 3:
      var value = new proto.io.statefun.sdk.reqreply.FromFunction.DelayedInvocation;
      reader.readMessage(value,proto.io.statefun.sdk.reqreply.FromFunction.DelayedInvocation.deserializeBinaryFromReader);
      msg.addDelayedInvocations(value);
      break;
    case 4:
      var value = new proto.io.statefun.sdk.reqreply.FromFunction.EgressMessage;
      reader.readMessage(value,proto.io.statefun.sdk.reqreply.FromFunction.EgressMessage.deserializeBinaryFromReader);
      msg.addOutgoingEgresses(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.statefun.sdk.reqreply.FromFunction.InvocationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.statefun.sdk.reqreply.FromFunction.InvocationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.statefun.sdk.reqreply.FromFunction.InvocationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.statefun.sdk.reqreply.FromFunction.InvocationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStateMutationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation.serializeBinaryToWriter
    );
  }
  f = message.getOutgoingMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.io.statefun.sdk.reqreply.FromFunction.Invocation.serializeBinaryToWriter
    );
  }
  f = message.getDelayedInvocationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.io.statefun.sdk.reqreply.FromFunction.DelayedInvocation.serializeBinaryToWriter
    );
  }
  f = message.getOutgoingEgressesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.io.statefun.sdk.reqreply.FromFunction.EgressMessage.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PersistedValueMutation state_mutations = 1;
 * @return {!Array<!proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation>}
 */
proto.io.statefun.sdk.reqreply.FromFunction.InvocationResponse.prototype.getStateMutationsList = function() {
  return /** @type{!Array<!proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation, 1));
};


/** @param {!Array<!proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation>} value */
proto.io.statefun.sdk.reqreply.FromFunction.InvocationResponse.prototype.setStateMutationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation}
 */
proto.io.statefun.sdk.reqreply.FromFunction.InvocationResponse.prototype.addStateMutations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.io.statefun.sdk.reqreply.FromFunction.InvocationResponse.prototype.clearStateMutationsList = function() {
  this.setStateMutationsList([]);
};


/**
 * repeated Invocation outgoing_messages = 2;
 * @return {!Array<!proto.io.statefun.sdk.reqreply.FromFunction.Invocation>}
 */
proto.io.statefun.sdk.reqreply.FromFunction.InvocationResponse.prototype.getOutgoingMessagesList = function() {
  return /** @type{!Array<!proto.io.statefun.sdk.reqreply.FromFunction.Invocation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.io.statefun.sdk.reqreply.FromFunction.Invocation, 2));
};


/** @param {!Array<!proto.io.statefun.sdk.reqreply.FromFunction.Invocation>} value */
proto.io.statefun.sdk.reqreply.FromFunction.InvocationResponse.prototype.setOutgoingMessagesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.io.statefun.sdk.reqreply.FromFunction.Invocation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.io.statefun.sdk.reqreply.FromFunction.Invocation}
 */
proto.io.statefun.sdk.reqreply.FromFunction.InvocationResponse.prototype.addOutgoingMessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.io.statefun.sdk.reqreply.FromFunction.Invocation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.io.statefun.sdk.reqreply.FromFunction.InvocationResponse.prototype.clearOutgoingMessagesList = function() {
  this.setOutgoingMessagesList([]);
};


/**
 * repeated DelayedInvocation delayed_invocations = 3;
 * @return {!Array<!proto.io.statefun.sdk.reqreply.FromFunction.DelayedInvocation>}
 */
proto.io.statefun.sdk.reqreply.FromFunction.InvocationResponse.prototype.getDelayedInvocationsList = function() {
  return /** @type{!Array<!proto.io.statefun.sdk.reqreply.FromFunction.DelayedInvocation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.io.statefun.sdk.reqreply.FromFunction.DelayedInvocation, 3));
};


/** @param {!Array<!proto.io.statefun.sdk.reqreply.FromFunction.DelayedInvocation>} value */
proto.io.statefun.sdk.reqreply.FromFunction.InvocationResponse.prototype.setDelayedInvocationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.io.statefun.sdk.reqreply.FromFunction.DelayedInvocation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.io.statefun.sdk.reqreply.FromFunction.DelayedInvocation}
 */
proto.io.statefun.sdk.reqreply.FromFunction.InvocationResponse.prototype.addDelayedInvocations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.io.statefun.sdk.reqreply.FromFunction.DelayedInvocation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.io.statefun.sdk.reqreply.FromFunction.InvocationResponse.prototype.clearDelayedInvocationsList = function() {
  this.setDelayedInvocationsList([]);
};


/**
 * repeated EgressMessage outgoing_egresses = 4;
 * @return {!Array<!proto.io.statefun.sdk.reqreply.FromFunction.EgressMessage>}
 */
proto.io.statefun.sdk.reqreply.FromFunction.InvocationResponse.prototype.getOutgoingEgressesList = function() {
  return /** @type{!Array<!proto.io.statefun.sdk.reqreply.FromFunction.EgressMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.io.statefun.sdk.reqreply.FromFunction.EgressMessage, 4));
};


/** @param {!Array<!proto.io.statefun.sdk.reqreply.FromFunction.EgressMessage>} value */
proto.io.statefun.sdk.reqreply.FromFunction.InvocationResponse.prototype.setOutgoingEgressesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.io.statefun.sdk.reqreply.FromFunction.EgressMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.io.statefun.sdk.reqreply.FromFunction.EgressMessage}
 */
proto.io.statefun.sdk.reqreply.FromFunction.InvocationResponse.prototype.addOutgoingEgresses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.io.statefun.sdk.reqreply.FromFunction.EgressMessage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.io.statefun.sdk.reqreply.FromFunction.InvocationResponse.prototype.clearOutgoingEgressesList = function() {
  this.setOutgoingEgressesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    mode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    expireAfterMillis: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec}
 */
proto.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec;
  return proto.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec}
 */
proto.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec.ExpireMode} */ (reader.readEnum());
      msg.setMode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setExpireAfterMillis(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getExpireAfterMillis();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec.ExpireMode = {
  NONE: 0,
  AFTER_WRITE: 1,
  AFTER_INVOKE: 2
};

/**
 * optional ExpireMode mode = 1;
 * @return {!proto.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec.ExpireMode}
 */
proto.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec.prototype.getMode = function() {
  return /** @type {!proto.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec.ExpireMode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec.ExpireMode} value */
proto.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec.prototype.setMode = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int64 expire_after_millis = 2;
 * @return {number}
 */
proto.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec.prototype.getExpireAfterMillis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec.prototype.setExpireAfterMillis = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    stateName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    expirationSpec: (f = msg.getExpirationSpec()) && proto.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec.toObject(includeInstance, f),
    typeTypename: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec}
 */
proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec;
  return proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec}
 */
proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStateName(value);
      break;
    case 2:
      var value = new proto.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec;
      reader.readMessage(value,proto.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec.deserializeBinaryFromReader);
      msg.setExpirationSpec(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTypeTypename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStateName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExpirationSpec();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec.serializeBinaryToWriter
    );
  }
  f = message.getTypeTypename();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string state_name = 1;
 * @return {string}
 */
proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec.prototype.getStateName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec.prototype.setStateName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ExpirationSpec expiration_spec = 2;
 * @return {?proto.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec}
 */
proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec.prototype.getExpirationSpec = function() {
  return /** @type{?proto.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec} */ (
    jspb.Message.getWrapperField(this, proto.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec, 2));
};


/** @param {?proto.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec|undefined} value */
proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec.prototype.setExpirationSpec = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec.prototype.clearExpirationSpec = function() {
  this.setExpirationSpec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec.prototype.hasExpirationSpec = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string type_typename = 3;
 * @return {string}
 */
proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec.prototype.getTypeTypename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec.prototype.setTypeTypename = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.statefun.sdk.reqreply.FromFunction.IncompleteInvocationContext.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.statefun.sdk.reqreply.FromFunction.IncompleteInvocationContext.prototype.toObject = function(opt_includeInstance) {
  return proto.io.statefun.sdk.reqreply.FromFunction.IncompleteInvocationContext.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.statefun.sdk.reqreply.FromFunction.IncompleteInvocationContext} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.statefun.sdk.reqreply.FromFunction.IncompleteInvocationContext.toObject = function(includeInstance, msg) {
  var f, obj = {
    missingValuesList: jspb.Message.toObjectList(msg.getMissingValuesList(),
    proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.statefun.sdk.reqreply.FromFunction.IncompleteInvocationContext}
 */
proto.io.statefun.sdk.reqreply.FromFunction.IncompleteInvocationContext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.statefun.sdk.reqreply.FromFunction.IncompleteInvocationContext;
  return proto.io.statefun.sdk.reqreply.FromFunction.IncompleteInvocationContext.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.statefun.sdk.reqreply.FromFunction.IncompleteInvocationContext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.statefun.sdk.reqreply.FromFunction.IncompleteInvocationContext}
 */
proto.io.statefun.sdk.reqreply.FromFunction.IncompleteInvocationContext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec;
      reader.readMessage(value,proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec.deserializeBinaryFromReader);
      msg.addMissingValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.statefun.sdk.reqreply.FromFunction.IncompleteInvocationContext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.statefun.sdk.reqreply.FromFunction.IncompleteInvocationContext.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.statefun.sdk.reqreply.FromFunction.IncompleteInvocationContext} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.statefun.sdk.reqreply.FromFunction.IncompleteInvocationContext.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMissingValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PersistedValueSpec missing_values = 1;
 * @return {!Array<!proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec>}
 */
proto.io.statefun.sdk.reqreply.FromFunction.IncompleteInvocationContext.prototype.getMissingValuesList = function() {
  return /** @type{!Array<!proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec, 1));
};


/** @param {!Array<!proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec>} value */
proto.io.statefun.sdk.reqreply.FromFunction.IncompleteInvocationContext.prototype.setMissingValuesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec=} opt_value
 * @param {number=} opt_index
 * @return {!proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec}
 */
proto.io.statefun.sdk.reqreply.FromFunction.IncompleteInvocationContext.prototype.addMissingValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.io.statefun.sdk.reqreply.FromFunction.IncompleteInvocationContext.prototype.clearMissingValuesList = function() {
  this.setMissingValuesList([]);
};


/**
 * optional InvocationResponse invocation_result = 100;
 * @return {?proto.io.statefun.sdk.reqreply.FromFunction.InvocationResponse}
 */
proto.io.statefun.sdk.reqreply.FromFunction.prototype.getInvocationResult = function() {
  return /** @type{?proto.io.statefun.sdk.reqreply.FromFunction.InvocationResponse} */ (
    jspb.Message.getWrapperField(this, proto.io.statefun.sdk.reqreply.FromFunction.InvocationResponse, 100));
};


/** @param {?proto.io.statefun.sdk.reqreply.FromFunction.InvocationResponse|undefined} value */
proto.io.statefun.sdk.reqreply.FromFunction.prototype.setInvocationResult = function(value) {
  jspb.Message.setOneofWrapperField(this, 100, proto.io.statefun.sdk.reqreply.FromFunction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.io.statefun.sdk.reqreply.FromFunction.prototype.clearInvocationResult = function() {
  this.setInvocationResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.statefun.sdk.reqreply.FromFunction.prototype.hasInvocationResult = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * optional IncompleteInvocationContext incomplete_invocation_context = 101;
 * @return {?proto.io.statefun.sdk.reqreply.FromFunction.IncompleteInvocationContext}
 */
proto.io.statefun.sdk.reqreply.FromFunction.prototype.getIncompleteInvocationContext = function() {
  return /** @type{?proto.io.statefun.sdk.reqreply.FromFunction.IncompleteInvocationContext} */ (
    jspb.Message.getWrapperField(this, proto.io.statefun.sdk.reqreply.FromFunction.IncompleteInvocationContext, 101));
};


/** @param {?proto.io.statefun.sdk.reqreply.FromFunction.IncompleteInvocationContext|undefined} value */
proto.io.statefun.sdk.reqreply.FromFunction.prototype.setIncompleteInvocationContext = function(value) {
  jspb.Message.setOneofWrapperField(this, 101, proto.io.statefun.sdk.reqreply.FromFunction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.io.statefun.sdk.reqreply.FromFunction.prototype.clearIncompleteInvocationContext = function() {
  this.setIncompleteInvocationContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.statefun.sdk.reqreply.FromFunction.prototype.hasIncompleteInvocationContext = function() {
  return jspb.Message.getField(this, 101) != null;
};


goog.object.extend(exports, proto.io.statefun.sdk.reqreply);
