// source: commands.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.org.apache.flink.statefun.e2e.smoke.Command', null, global);
goog.exportSymbol('proto.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation', null, global);
goog.exportSymbol('proto.org.apache.flink.statefun.e2e.smoke.Command.CommandCase', null, global);
goog.exportSymbol('proto.org.apache.flink.statefun.e2e.smoke.Command.IncrementState', null, global);
goog.exportSymbol('proto.org.apache.flink.statefun.e2e.smoke.Command.Send', null, global);
goog.exportSymbol('proto.org.apache.flink.statefun.e2e.smoke.Command.SendAfter', null, global);
goog.exportSymbol('proto.org.apache.flink.statefun.e2e.smoke.Command.SendEgress', null, global);
goog.exportSymbol('proto.org.apache.flink.statefun.e2e.smoke.Command.Verify', null, global);
goog.exportSymbol('proto.org.apache.flink.statefun.e2e.smoke.Commands', null, global);
goog.exportSymbol('proto.org.apache.flink.statefun.e2e.smoke.SourceCommand', null, global);
goog.exportSymbol('proto.org.apache.flink.statefun.e2e.smoke.VerificationResult', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.flink.statefun.e2e.smoke.SourceCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.apache.flink.statefun.e2e.smoke.SourceCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.flink.statefun.e2e.smoke.SourceCommand.displayName = 'proto.org.apache.flink.statefun.e2e.smoke.SourceCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.flink.statefun.e2e.smoke.Commands = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.org.apache.flink.statefun.e2e.smoke.Commands.repeatedFields_, null);
};
goog.inherits(proto.org.apache.flink.statefun.e2e.smoke.Commands, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.flink.statefun.e2e.smoke.Commands.displayName = 'proto.org.apache.flink.statefun.e2e.smoke.Commands';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.flink.statefun.e2e.smoke.Command = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.org.apache.flink.statefun.e2e.smoke.Command.oneofGroups_);
};
goog.inherits(proto.org.apache.flink.statefun.e2e.smoke.Command, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.flink.statefun.e2e.smoke.Command.displayName = 'proto.org.apache.flink.statefun.e2e.smoke.Command';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.IncrementState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.apache.flink.statefun.e2e.smoke.Command.IncrementState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.flink.statefun.e2e.smoke.Command.IncrementState.displayName = 'proto.org.apache.flink.statefun.e2e.smoke.Command.IncrementState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.Send = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.apache.flink.statefun.e2e.smoke.Command.Send, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.flink.statefun.e2e.smoke.Command.Send.displayName = 'proto.org.apache.flink.statefun.e2e.smoke.Command.Send';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.SendAfter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.apache.flink.statefun.e2e.smoke.Command.SendAfter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.flink.statefun.e2e.smoke.Command.SendAfter.displayName = 'proto.org.apache.flink.statefun.e2e.smoke.Command.SendAfter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.SendEgress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.apache.flink.statefun.e2e.smoke.Command.SendEgress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.flink.statefun.e2e.smoke.Command.SendEgress.displayName = 'proto.org.apache.flink.statefun.e2e.smoke.Command.SendEgress';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation.displayName = 'proto.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.Verify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.apache.flink.statefun.e2e.smoke.Command.Verify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.flink.statefun.e2e.smoke.Command.Verify.displayName = 'proto.org.apache.flink.statefun.e2e.smoke.Command.Verify';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.flink.statefun.e2e.smoke.VerificationResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.apache.flink.statefun.e2e.smoke.VerificationResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.flink.statefun.e2e.smoke.VerificationResult.displayName = 'proto.org.apache.flink.statefun.e2e.smoke.VerificationResult';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.flink.statefun.e2e.smoke.SourceCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.flink.statefun.e2e.smoke.SourceCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.flink.statefun.e2e.smoke.SourceCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.flink.statefun.e2e.smoke.SourceCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    target: jspb.Message.getFieldWithDefault(msg, 1, 0),
    commands: (f = msg.getCommands()) && proto.org.apache.flink.statefun.e2e.smoke.Commands.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.flink.statefun.e2e.smoke.SourceCommand}
 */
proto.org.apache.flink.statefun.e2e.smoke.SourceCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.flink.statefun.e2e.smoke.SourceCommand;
  return proto.org.apache.flink.statefun.e2e.smoke.SourceCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.flink.statefun.e2e.smoke.SourceCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.flink.statefun.e2e.smoke.SourceCommand}
 */
proto.org.apache.flink.statefun.e2e.smoke.SourceCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTarget(value);
      break;
    case 2:
      var value = new proto.org.apache.flink.statefun.e2e.smoke.Commands;
      reader.readMessage(value,proto.org.apache.flink.statefun.e2e.smoke.Commands.deserializeBinaryFromReader);
      msg.setCommands(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.flink.statefun.e2e.smoke.SourceCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.flink.statefun.e2e.smoke.SourceCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.flink.statefun.e2e.smoke.SourceCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.flink.statefun.e2e.smoke.SourceCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTarget();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCommands();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.org.apache.flink.statefun.e2e.smoke.Commands.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 target = 1;
 * @return {number}
 */
proto.org.apache.flink.statefun.e2e.smoke.SourceCommand.prototype.getTarget = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.org.apache.flink.statefun.e2e.smoke.SourceCommand} returns this
 */
proto.org.apache.flink.statefun.e2e.smoke.SourceCommand.prototype.setTarget = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Commands commands = 2;
 * @return {?proto.org.apache.flink.statefun.e2e.smoke.Commands}
 */
proto.org.apache.flink.statefun.e2e.smoke.SourceCommand.prototype.getCommands = function() {
  return /** @type{?proto.org.apache.flink.statefun.e2e.smoke.Commands} */ (
    jspb.Message.getWrapperField(this, proto.org.apache.flink.statefun.e2e.smoke.Commands, 2));
};


/**
 * @param {?proto.org.apache.flink.statefun.e2e.smoke.Commands|undefined} value
 * @return {!proto.org.apache.flink.statefun.e2e.smoke.SourceCommand} returns this
*/
proto.org.apache.flink.statefun.e2e.smoke.SourceCommand.prototype.setCommands = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.apache.flink.statefun.e2e.smoke.SourceCommand} returns this
 */
proto.org.apache.flink.statefun.e2e.smoke.SourceCommand.prototype.clearCommands = function() {
  return this.setCommands(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.apache.flink.statefun.e2e.smoke.SourceCommand.prototype.hasCommands = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.org.apache.flink.statefun.e2e.smoke.Commands.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.flink.statefun.e2e.smoke.Commands.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.flink.statefun.e2e.smoke.Commands.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.flink.statefun.e2e.smoke.Commands} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.flink.statefun.e2e.smoke.Commands.toObject = function(includeInstance, msg) {
  var f, obj = {
    commandList: jspb.Message.toObjectList(msg.getCommandList(),
    proto.org.apache.flink.statefun.e2e.smoke.Command.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.flink.statefun.e2e.smoke.Commands}
 */
proto.org.apache.flink.statefun.e2e.smoke.Commands.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.flink.statefun.e2e.smoke.Commands;
  return proto.org.apache.flink.statefun.e2e.smoke.Commands.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.flink.statefun.e2e.smoke.Commands} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.flink.statefun.e2e.smoke.Commands}
 */
proto.org.apache.flink.statefun.e2e.smoke.Commands.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.org.apache.flink.statefun.e2e.smoke.Command;
      reader.readMessage(value,proto.org.apache.flink.statefun.e2e.smoke.Command.deserializeBinaryFromReader);
      msg.addCommand(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.flink.statefun.e2e.smoke.Commands.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.flink.statefun.e2e.smoke.Commands.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.flink.statefun.e2e.smoke.Commands} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.flink.statefun.e2e.smoke.Commands.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommandList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.org.apache.flink.statefun.e2e.smoke.Command.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Command command = 1;
 * @return {!Array<!proto.org.apache.flink.statefun.e2e.smoke.Command>}
 */
proto.org.apache.flink.statefun.e2e.smoke.Commands.prototype.getCommandList = function() {
  return /** @type{!Array<!proto.org.apache.flink.statefun.e2e.smoke.Command>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.org.apache.flink.statefun.e2e.smoke.Command, 1));
};


/**
 * @param {!Array<!proto.org.apache.flink.statefun.e2e.smoke.Command>} value
 * @return {!proto.org.apache.flink.statefun.e2e.smoke.Commands} returns this
*/
proto.org.apache.flink.statefun.e2e.smoke.Commands.prototype.setCommandList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.org.apache.flink.statefun.e2e.smoke.Command=} opt_value
 * @param {number=} opt_index
 * @return {!proto.org.apache.flink.statefun.e2e.smoke.Command}
 */
proto.org.apache.flink.statefun.e2e.smoke.Commands.prototype.addCommand = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.org.apache.flink.statefun.e2e.smoke.Command, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.org.apache.flink.statefun.e2e.smoke.Commands} returns this
 */
proto.org.apache.flink.statefun.e2e.smoke.Commands.prototype.clearCommandList = function() {
  return this.setCommandList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.oneofGroups_ = [[1,2,3,4,5,6]];

/**
 * @enum {number}
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.CommandCase = {
  COMMAND_NOT_SET: 0,
  INCREMENT: 1,
  SEND: 2,
  SEND_AFTER: 3,
  SEND_EGRESS: 4,
  ASYNC_OPERATION: 5,
  VERIFY: 6
};

/**
 * @return {proto.org.apache.flink.statefun.e2e.smoke.Command.CommandCase}
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.prototype.getCommandCase = function() {
  return /** @type {proto.org.apache.flink.statefun.e2e.smoke.Command.CommandCase} */(jspb.Message.computeOneofCase(this, proto.org.apache.flink.statefun.e2e.smoke.Command.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.flink.statefun.e2e.smoke.Command.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.flink.statefun.e2e.smoke.Command} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.toObject = function(includeInstance, msg) {
  var f, obj = {
    increment: (f = msg.getIncrement()) && proto.org.apache.flink.statefun.e2e.smoke.Command.IncrementState.toObject(includeInstance, f),
    send: (f = msg.getSend()) && proto.org.apache.flink.statefun.e2e.smoke.Command.Send.toObject(includeInstance, f),
    sendAfter: (f = msg.getSendAfter()) && proto.org.apache.flink.statefun.e2e.smoke.Command.SendAfter.toObject(includeInstance, f),
    sendEgress: (f = msg.getSendEgress()) && proto.org.apache.flink.statefun.e2e.smoke.Command.SendEgress.toObject(includeInstance, f),
    asyncOperation: (f = msg.getAsyncOperation()) && proto.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation.toObject(includeInstance, f),
    verify: (f = msg.getVerify()) && proto.org.apache.flink.statefun.e2e.smoke.Command.Verify.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.flink.statefun.e2e.smoke.Command}
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.flink.statefun.e2e.smoke.Command;
  return proto.org.apache.flink.statefun.e2e.smoke.Command.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.flink.statefun.e2e.smoke.Command} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.flink.statefun.e2e.smoke.Command}
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.org.apache.flink.statefun.e2e.smoke.Command.IncrementState;
      reader.readMessage(value,proto.org.apache.flink.statefun.e2e.smoke.Command.IncrementState.deserializeBinaryFromReader);
      msg.setIncrement(value);
      break;
    case 2:
      var value = new proto.org.apache.flink.statefun.e2e.smoke.Command.Send;
      reader.readMessage(value,proto.org.apache.flink.statefun.e2e.smoke.Command.Send.deserializeBinaryFromReader);
      msg.setSend(value);
      break;
    case 3:
      var value = new proto.org.apache.flink.statefun.e2e.smoke.Command.SendAfter;
      reader.readMessage(value,proto.org.apache.flink.statefun.e2e.smoke.Command.SendAfter.deserializeBinaryFromReader);
      msg.setSendAfter(value);
      break;
    case 4:
      var value = new proto.org.apache.flink.statefun.e2e.smoke.Command.SendEgress;
      reader.readMessage(value,proto.org.apache.flink.statefun.e2e.smoke.Command.SendEgress.deserializeBinaryFromReader);
      msg.setSendEgress(value);
      break;
    case 5:
      var value = new proto.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation;
      reader.readMessage(value,proto.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation.deserializeBinaryFromReader);
      msg.setAsyncOperation(value);
      break;
    case 6:
      var value = new proto.org.apache.flink.statefun.e2e.smoke.Command.Verify;
      reader.readMessage(value,proto.org.apache.flink.statefun.e2e.smoke.Command.Verify.deserializeBinaryFromReader);
      msg.setVerify(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.flink.statefun.e2e.smoke.Command.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.flink.statefun.e2e.smoke.Command} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIncrement();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.org.apache.flink.statefun.e2e.smoke.Command.IncrementState.serializeBinaryToWriter
    );
  }
  f = message.getSend();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.org.apache.flink.statefun.e2e.smoke.Command.Send.serializeBinaryToWriter
    );
  }
  f = message.getSendAfter();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.org.apache.flink.statefun.e2e.smoke.Command.SendAfter.serializeBinaryToWriter
    );
  }
  f = message.getSendEgress();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.org.apache.flink.statefun.e2e.smoke.Command.SendEgress.serializeBinaryToWriter
    );
  }
  f = message.getAsyncOperation();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation.serializeBinaryToWriter
    );
  }
  f = message.getVerify();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.org.apache.flink.statefun.e2e.smoke.Command.Verify.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.IncrementState.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.flink.statefun.e2e.smoke.Command.IncrementState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.flink.statefun.e2e.smoke.Command.IncrementState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.IncrementState.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.flink.statefun.e2e.smoke.Command.IncrementState}
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.IncrementState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.flink.statefun.e2e.smoke.Command.IncrementState;
  return proto.org.apache.flink.statefun.e2e.smoke.Command.IncrementState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.flink.statefun.e2e.smoke.Command.IncrementState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.flink.statefun.e2e.smoke.Command.IncrementState}
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.IncrementState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.IncrementState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.flink.statefun.e2e.smoke.Command.IncrementState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.flink.statefun.e2e.smoke.Command.IncrementState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.IncrementState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.Send.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.flink.statefun.e2e.smoke.Command.Send.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.flink.statefun.e2e.smoke.Command.Send} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.Send.toObject = function(includeInstance, msg) {
  var f, obj = {
    target: jspb.Message.getFieldWithDefault(msg, 1, 0),
    commands: (f = msg.getCommands()) && proto.org.apache.flink.statefun.e2e.smoke.Commands.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.flink.statefun.e2e.smoke.Command.Send}
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.Send.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.flink.statefun.e2e.smoke.Command.Send;
  return proto.org.apache.flink.statefun.e2e.smoke.Command.Send.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.flink.statefun.e2e.smoke.Command.Send} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.flink.statefun.e2e.smoke.Command.Send}
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.Send.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTarget(value);
      break;
    case 2:
      var value = new proto.org.apache.flink.statefun.e2e.smoke.Commands;
      reader.readMessage(value,proto.org.apache.flink.statefun.e2e.smoke.Commands.deserializeBinaryFromReader);
      msg.setCommands(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.Send.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.flink.statefun.e2e.smoke.Command.Send.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.flink.statefun.e2e.smoke.Command.Send} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.Send.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTarget();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCommands();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.org.apache.flink.statefun.e2e.smoke.Commands.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 target = 1;
 * @return {number}
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.Send.prototype.getTarget = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.org.apache.flink.statefun.e2e.smoke.Command.Send} returns this
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.Send.prototype.setTarget = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Commands commands = 2;
 * @return {?proto.org.apache.flink.statefun.e2e.smoke.Commands}
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.Send.prototype.getCommands = function() {
  return /** @type{?proto.org.apache.flink.statefun.e2e.smoke.Commands} */ (
    jspb.Message.getWrapperField(this, proto.org.apache.flink.statefun.e2e.smoke.Commands, 2));
};


/**
 * @param {?proto.org.apache.flink.statefun.e2e.smoke.Commands|undefined} value
 * @return {!proto.org.apache.flink.statefun.e2e.smoke.Command.Send} returns this
*/
proto.org.apache.flink.statefun.e2e.smoke.Command.Send.prototype.setCommands = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.apache.flink.statefun.e2e.smoke.Command.Send} returns this
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.Send.prototype.clearCommands = function() {
  return this.setCommands(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.Send.prototype.hasCommands = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.SendAfter.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.flink.statefun.e2e.smoke.Command.SendAfter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.flink.statefun.e2e.smoke.Command.SendAfter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.SendAfter.toObject = function(includeInstance, msg) {
  var f, obj = {
    target: jspb.Message.getFieldWithDefault(msg, 1, 0),
    commands: (f = msg.getCommands()) && proto.org.apache.flink.statefun.e2e.smoke.Commands.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.flink.statefun.e2e.smoke.Command.SendAfter}
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.SendAfter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.flink.statefun.e2e.smoke.Command.SendAfter;
  return proto.org.apache.flink.statefun.e2e.smoke.Command.SendAfter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.flink.statefun.e2e.smoke.Command.SendAfter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.flink.statefun.e2e.smoke.Command.SendAfter}
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.SendAfter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTarget(value);
      break;
    case 2:
      var value = new proto.org.apache.flink.statefun.e2e.smoke.Commands;
      reader.readMessage(value,proto.org.apache.flink.statefun.e2e.smoke.Commands.deserializeBinaryFromReader);
      msg.setCommands(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.SendAfter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.flink.statefun.e2e.smoke.Command.SendAfter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.flink.statefun.e2e.smoke.Command.SendAfter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.SendAfter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTarget();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCommands();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.org.apache.flink.statefun.e2e.smoke.Commands.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 target = 1;
 * @return {number}
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.SendAfter.prototype.getTarget = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.org.apache.flink.statefun.e2e.smoke.Command.SendAfter} returns this
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.SendAfter.prototype.setTarget = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Commands commands = 2;
 * @return {?proto.org.apache.flink.statefun.e2e.smoke.Commands}
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.SendAfter.prototype.getCommands = function() {
  return /** @type{?proto.org.apache.flink.statefun.e2e.smoke.Commands} */ (
    jspb.Message.getWrapperField(this, proto.org.apache.flink.statefun.e2e.smoke.Commands, 2));
};


/**
 * @param {?proto.org.apache.flink.statefun.e2e.smoke.Commands|undefined} value
 * @return {!proto.org.apache.flink.statefun.e2e.smoke.Command.SendAfter} returns this
*/
proto.org.apache.flink.statefun.e2e.smoke.Command.SendAfter.prototype.setCommands = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.apache.flink.statefun.e2e.smoke.Command.SendAfter} returns this
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.SendAfter.prototype.clearCommands = function() {
  return this.setCommands(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.SendAfter.prototype.hasCommands = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.SendEgress.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.flink.statefun.e2e.smoke.Command.SendEgress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.flink.statefun.e2e.smoke.Command.SendEgress} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.SendEgress.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.flink.statefun.e2e.smoke.Command.SendEgress}
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.SendEgress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.flink.statefun.e2e.smoke.Command.SendEgress;
  return proto.org.apache.flink.statefun.e2e.smoke.Command.SendEgress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.flink.statefun.e2e.smoke.Command.SendEgress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.flink.statefun.e2e.smoke.Command.SendEgress}
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.SendEgress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.SendEgress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.flink.statefun.e2e.smoke.Command.SendEgress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.flink.statefun.e2e.smoke.Command.SendEgress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.SendEgress.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation.toObject = function(includeInstance, msg) {
  var f, obj = {
    failure: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    resolvedCommands: (f = msg.getResolvedCommands()) && proto.org.apache.flink.statefun.e2e.smoke.Commands.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation}
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation;
  return proto.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation}
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFailure(value);
      break;
    case 2:
      var value = new proto.org.apache.flink.statefun.e2e.smoke.Commands;
      reader.readMessage(value,proto.org.apache.flink.statefun.e2e.smoke.Commands.deserializeBinaryFromReader);
      msg.setResolvedCommands(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFailure();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getResolvedCommands();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.org.apache.flink.statefun.e2e.smoke.Commands.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool failure = 1;
 * @return {boolean}
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation.prototype.getFailure = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation} returns this
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation.prototype.setFailure = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional Commands resolved_commands = 2;
 * @return {?proto.org.apache.flink.statefun.e2e.smoke.Commands}
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation.prototype.getResolvedCommands = function() {
  return /** @type{?proto.org.apache.flink.statefun.e2e.smoke.Commands} */ (
    jspb.Message.getWrapperField(this, proto.org.apache.flink.statefun.e2e.smoke.Commands, 2));
};


/**
 * @param {?proto.org.apache.flink.statefun.e2e.smoke.Commands|undefined} value
 * @return {!proto.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation} returns this
*/
proto.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation.prototype.setResolvedCommands = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation} returns this
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation.prototype.clearResolvedCommands = function() {
  return this.setResolvedCommands(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation.prototype.hasResolvedCommands = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.Verify.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.flink.statefun.e2e.smoke.Command.Verify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.flink.statefun.e2e.smoke.Command.Verify} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.Verify.toObject = function(includeInstance, msg) {
  var f, obj = {
    expected: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.flink.statefun.e2e.smoke.Command.Verify}
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.Verify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.flink.statefun.e2e.smoke.Command.Verify;
  return proto.org.apache.flink.statefun.e2e.smoke.Command.Verify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.flink.statefun.e2e.smoke.Command.Verify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.flink.statefun.e2e.smoke.Command.Verify}
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.Verify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setExpected(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.Verify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.flink.statefun.e2e.smoke.Command.Verify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.flink.statefun.e2e.smoke.Command.Verify} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.Verify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExpected();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 expected = 1;
 * @return {number}
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.Verify.prototype.getExpected = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.org.apache.flink.statefun.e2e.smoke.Command.Verify} returns this
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.Verify.prototype.setExpected = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional IncrementState increment = 1;
 * @return {?proto.org.apache.flink.statefun.e2e.smoke.Command.IncrementState}
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.prototype.getIncrement = function() {
  return /** @type{?proto.org.apache.flink.statefun.e2e.smoke.Command.IncrementState} */ (
    jspb.Message.getWrapperField(this, proto.org.apache.flink.statefun.e2e.smoke.Command.IncrementState, 1));
};


/**
 * @param {?proto.org.apache.flink.statefun.e2e.smoke.Command.IncrementState|undefined} value
 * @return {!proto.org.apache.flink.statefun.e2e.smoke.Command} returns this
*/
proto.org.apache.flink.statefun.e2e.smoke.Command.prototype.setIncrement = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.org.apache.flink.statefun.e2e.smoke.Command.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.apache.flink.statefun.e2e.smoke.Command} returns this
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.prototype.clearIncrement = function() {
  return this.setIncrement(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.prototype.hasIncrement = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Send send = 2;
 * @return {?proto.org.apache.flink.statefun.e2e.smoke.Command.Send}
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.prototype.getSend = function() {
  return /** @type{?proto.org.apache.flink.statefun.e2e.smoke.Command.Send} */ (
    jspb.Message.getWrapperField(this, proto.org.apache.flink.statefun.e2e.smoke.Command.Send, 2));
};


/**
 * @param {?proto.org.apache.flink.statefun.e2e.smoke.Command.Send|undefined} value
 * @return {!proto.org.apache.flink.statefun.e2e.smoke.Command} returns this
*/
proto.org.apache.flink.statefun.e2e.smoke.Command.prototype.setSend = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.org.apache.flink.statefun.e2e.smoke.Command.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.apache.flink.statefun.e2e.smoke.Command} returns this
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.prototype.clearSend = function() {
  return this.setSend(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.prototype.hasSend = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SendAfter send_after = 3;
 * @return {?proto.org.apache.flink.statefun.e2e.smoke.Command.SendAfter}
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.prototype.getSendAfter = function() {
  return /** @type{?proto.org.apache.flink.statefun.e2e.smoke.Command.SendAfter} */ (
    jspb.Message.getWrapperField(this, proto.org.apache.flink.statefun.e2e.smoke.Command.SendAfter, 3));
};


/**
 * @param {?proto.org.apache.flink.statefun.e2e.smoke.Command.SendAfter|undefined} value
 * @return {!proto.org.apache.flink.statefun.e2e.smoke.Command} returns this
*/
proto.org.apache.flink.statefun.e2e.smoke.Command.prototype.setSendAfter = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.org.apache.flink.statefun.e2e.smoke.Command.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.apache.flink.statefun.e2e.smoke.Command} returns this
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.prototype.clearSendAfter = function() {
  return this.setSendAfter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.prototype.hasSendAfter = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SendEgress send_egress = 4;
 * @return {?proto.org.apache.flink.statefun.e2e.smoke.Command.SendEgress}
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.prototype.getSendEgress = function() {
  return /** @type{?proto.org.apache.flink.statefun.e2e.smoke.Command.SendEgress} */ (
    jspb.Message.getWrapperField(this, proto.org.apache.flink.statefun.e2e.smoke.Command.SendEgress, 4));
};


/**
 * @param {?proto.org.apache.flink.statefun.e2e.smoke.Command.SendEgress|undefined} value
 * @return {!proto.org.apache.flink.statefun.e2e.smoke.Command} returns this
*/
proto.org.apache.flink.statefun.e2e.smoke.Command.prototype.setSendEgress = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.org.apache.flink.statefun.e2e.smoke.Command.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.apache.flink.statefun.e2e.smoke.Command} returns this
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.prototype.clearSendEgress = function() {
  return this.setSendEgress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.prototype.hasSendEgress = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional AsyncOperation async_operation = 5;
 * @return {?proto.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation}
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.prototype.getAsyncOperation = function() {
  return /** @type{?proto.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation} */ (
    jspb.Message.getWrapperField(this, proto.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation, 5));
};


/**
 * @param {?proto.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation|undefined} value
 * @return {!proto.org.apache.flink.statefun.e2e.smoke.Command} returns this
*/
proto.org.apache.flink.statefun.e2e.smoke.Command.prototype.setAsyncOperation = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.org.apache.flink.statefun.e2e.smoke.Command.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.apache.flink.statefun.e2e.smoke.Command} returns this
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.prototype.clearAsyncOperation = function() {
  return this.setAsyncOperation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.prototype.hasAsyncOperation = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Verify verify = 6;
 * @return {?proto.org.apache.flink.statefun.e2e.smoke.Command.Verify}
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.prototype.getVerify = function() {
  return /** @type{?proto.org.apache.flink.statefun.e2e.smoke.Command.Verify} */ (
    jspb.Message.getWrapperField(this, proto.org.apache.flink.statefun.e2e.smoke.Command.Verify, 6));
};


/**
 * @param {?proto.org.apache.flink.statefun.e2e.smoke.Command.Verify|undefined} value
 * @return {!proto.org.apache.flink.statefun.e2e.smoke.Command} returns this
*/
proto.org.apache.flink.statefun.e2e.smoke.Command.prototype.setVerify = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.org.apache.flink.statefun.e2e.smoke.Command.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.apache.flink.statefun.e2e.smoke.Command} returns this
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.prototype.clearVerify = function() {
  return this.setVerify(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.apache.flink.statefun.e2e.smoke.Command.prototype.hasVerify = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.flink.statefun.e2e.smoke.VerificationResult.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.flink.statefun.e2e.smoke.VerificationResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.flink.statefun.e2e.smoke.VerificationResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.flink.statefun.e2e.smoke.VerificationResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    expected: jspb.Message.getFieldWithDefault(msg, 2, 0),
    actual: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.flink.statefun.e2e.smoke.VerificationResult}
 */
proto.org.apache.flink.statefun.e2e.smoke.VerificationResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.flink.statefun.e2e.smoke.VerificationResult;
  return proto.org.apache.flink.statefun.e2e.smoke.VerificationResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.flink.statefun.e2e.smoke.VerificationResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.flink.statefun.e2e.smoke.VerificationResult}
 */
proto.org.apache.flink.statefun.e2e.smoke.VerificationResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setExpected(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setActual(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.flink.statefun.e2e.smoke.VerificationResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.flink.statefun.e2e.smoke.VerificationResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.flink.statefun.e2e.smoke.VerificationResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.flink.statefun.e2e.smoke.VerificationResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getExpected();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getActual();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.org.apache.flink.statefun.e2e.smoke.VerificationResult.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.org.apache.flink.statefun.e2e.smoke.VerificationResult} returns this
 */
proto.org.apache.flink.statefun.e2e.smoke.VerificationResult.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 expected = 2;
 * @return {number}
 */
proto.org.apache.flink.statefun.e2e.smoke.VerificationResult.prototype.getExpected = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.org.apache.flink.statefun.e2e.smoke.VerificationResult} returns this
 */
proto.org.apache.flink.statefun.e2e.smoke.VerificationResult.prototype.setExpected = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 actual = 3;
 * @return {number}
 */
proto.org.apache.flink.statefun.e2e.smoke.VerificationResult.prototype.getActual = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.org.apache.flink.statefun.e2e.smoke.VerificationResult} returns this
 */
proto.org.apache.flink.statefun.e2e.smoke.VerificationResult.prototype.setActual = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


goog.object.extend(exports, proto.org.apache.flink.statefun.e2e.smoke);
