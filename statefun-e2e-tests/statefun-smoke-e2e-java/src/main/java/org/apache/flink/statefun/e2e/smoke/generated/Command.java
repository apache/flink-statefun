// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: commands.proto

package org.apache.flink.statefun.e2e.smoke.generated;

/**
 * Protobuf type {@code org.apache.flink.statefun.e2e.smoke.Command}
 */
public  final class Command extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:org.apache.flink.statefun.e2e.smoke.Command)
    CommandOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Command.newBuilder() to construct.
  private Command(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Command() {
  }

  @Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Command(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            IncrementState.Builder subBuilder = null;
            if (commandCase_ == 1) {
              subBuilder = ((IncrementState) command_).toBuilder();
            }
            command_ =
                input.readMessage(IncrementState.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((IncrementState) command_);
              command_ = subBuilder.buildPartial();
            }
            commandCase_ = 1;
            break;
          }
          case 18: {
            Send.Builder subBuilder = null;
            if (commandCase_ == 2) {
              subBuilder = ((Send) command_).toBuilder();
            }
            command_ =
                input.readMessage(Send.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((Send) command_);
              command_ = subBuilder.buildPartial();
            }
            commandCase_ = 2;
            break;
          }
          case 26: {
            SendAfter.Builder subBuilder = null;
            if (commandCase_ == 3) {
              subBuilder = ((SendAfter) command_).toBuilder();
            }
            command_ =
                input.readMessage(SendAfter.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((SendAfter) command_);
              command_ = subBuilder.buildPartial();
            }
            commandCase_ = 3;
            break;
          }
          case 34: {
            SendEgress.Builder subBuilder = null;
            if (commandCase_ == 4) {
              subBuilder = ((SendEgress) command_).toBuilder();
            }
            command_ =
                input.readMessage(SendEgress.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((SendEgress) command_);
              command_ = subBuilder.buildPartial();
            }
            commandCase_ = 4;
            break;
          }
          case 42: {
            AsyncOperation.Builder subBuilder = null;
            if (commandCase_ == 5) {
              subBuilder = ((AsyncOperation) command_).toBuilder();
            }
            command_ =
                input.readMessage(AsyncOperation.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((AsyncOperation) command_);
              command_ = subBuilder.buildPartial();
            }
            commandCase_ = 5;
            break;
          }
          case 50: {
            Verify.Builder subBuilder = null;
            if (commandCase_ == 6) {
              subBuilder = ((Verify) command_).toBuilder();
            }
            command_ =
                input.readMessage(Verify.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((Verify) command_);
              command_ = subBuilder.buildPartial();
            }
            commandCase_ = 6;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_descriptor;
  }

  @Override
  protected FieldAccessorTable
      internalGetFieldAccessorTable() {
    return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            Command.class, Builder.class);
  }

  public interface IncrementStateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.flink.statefun.e2e.smoke.Command.IncrementState)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code org.apache.flink.statefun.e2e.smoke.Command.IncrementState}
   */
  public  static final class IncrementState extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.flink.statefun.e2e.smoke.Command.IncrementState)
      IncrementStateOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use IncrementState.newBuilder() to construct.
    private IncrementState(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private IncrementState() {
    }

    @Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private IncrementState(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_IncrementState_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_IncrementState_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              IncrementState.class, Builder.class);
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      unknownFields.writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof IncrementState)) {
        return super.equals(obj);
      }
      IncrementState other = (IncrementState) obj;

      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static IncrementState parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static IncrementState parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static IncrementState parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static IncrementState parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static IncrementState parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static IncrementState parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static IncrementState parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static IncrementState parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static IncrementState parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static IncrementState parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static IncrementState parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static IncrementState parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(IncrementState prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.flink.statefun.e2e.smoke.Command.IncrementState}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.flink.statefun.e2e.smoke.Command.IncrementState)
        IncrementStateOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_IncrementState_descriptor;
      }

      @Override
      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_IncrementState_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                IncrementState.class, Builder.class);
      }

      // Construct using org.apache.flink.statefun.e2e.smoke.generated.Command.IncrementState.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @Override
      public Builder clear() {
        super.clear();
        return this;
      }

      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_IncrementState_descriptor;
      }

      @Override
      public IncrementState getDefaultInstanceForType() {
        return IncrementState.getDefaultInstance();
      }

      @Override
      public IncrementState build() {
        IncrementState result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public IncrementState buildPartial() {
        IncrementState result = new IncrementState(this);
        onBuilt();
        return result;
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof IncrementState) {
          return mergeFrom((IncrementState)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(IncrementState other) {
        if (other == IncrementState.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        IncrementState parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (IncrementState) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      @Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.flink.statefun.e2e.smoke.Command.IncrementState)
    }

    // @@protoc_insertion_point(class_scope:org.apache.flink.statefun.e2e.smoke.Command.IncrementState)
    private static final IncrementState DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new IncrementState();
    }

    public static IncrementState getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<IncrementState>
        PARSER = new com.google.protobuf.AbstractParser<IncrementState>() {
      @Override
      public IncrementState parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new IncrementState(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<IncrementState> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<IncrementState> getParserForType() {
      return PARSER;
    }

    @Override
    public IncrementState getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SendOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.flink.statefun.e2e.smoke.Command.Send)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>int32 target = 1;</code>
     */
    int getTarget();

    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
     */
    boolean hasCommands();
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
     */
    Commands getCommands();
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
     */
    CommandsOrBuilder getCommandsOrBuilder();
  }
  /**
   * Protobuf type {@code org.apache.flink.statefun.e2e.smoke.Command.Send}
   */
  public  static final class Send extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.flink.statefun.e2e.smoke.Command.Send)
      SendOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Send.newBuilder() to construct.
    private Send(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Send() {
    }

    @Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Send(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              target_ = input.readInt32();
              break;
            }
            case 18: {
              Commands.Builder subBuilder = null;
              if (commands_ != null) {
                subBuilder = commands_.toBuilder();
              }
              commands_ = input.readMessage(Commands.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(commands_);
                commands_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_Send_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_Send_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Send.class, Builder.class);
    }

    public static final int TARGET_FIELD_NUMBER = 1;
    private int target_;
    /**
     * <code>int32 target = 1;</code>
     */
    public int getTarget() {
      return target_;
    }

    public static final int COMMANDS_FIELD_NUMBER = 2;
    private Commands commands_;
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
     */
    public boolean hasCommands() {
      return commands_ != null;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
     */
    public Commands getCommands() {
      return commands_ == null ? Commands.getDefaultInstance() : commands_;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
     */
    public CommandsOrBuilder getCommandsOrBuilder() {
      return getCommands();
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (target_ != 0) {
        output.writeInt32(1, target_);
      }
      if (commands_ != null) {
        output.writeMessage(2, getCommands());
      }
      unknownFields.writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (target_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, target_);
      }
      if (commands_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getCommands());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof Send)) {
        return super.equals(obj);
      }
      Send other = (Send) obj;

      if (getTarget()
          != other.getTarget()) return false;
      if (hasCommands() != other.hasCommands()) return false;
      if (hasCommands()) {
        if (!getCommands()
            .equals(other.getCommands())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TARGET_FIELD_NUMBER;
      hash = (53 * hash) + getTarget();
      if (hasCommands()) {
        hash = (37 * hash) + COMMANDS_FIELD_NUMBER;
        hash = (53 * hash) + getCommands().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static Send parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Send parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Send parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Send parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Send parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Send parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Send parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Send parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static Send parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static Send parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static Send parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Send parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(Send prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.flink.statefun.e2e.smoke.Command.Send}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.flink.statefun.e2e.smoke.Command.Send)
        SendOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_Send_descriptor;
      }

      @Override
      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_Send_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Send.class, Builder.class);
      }

      // Construct using org.apache.flink.statefun.e2e.smoke.generated.Command.Send.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @Override
      public Builder clear() {
        super.clear();
        target_ = 0;

        if (commandsBuilder_ == null) {
          commands_ = null;
        } else {
          commands_ = null;
          commandsBuilder_ = null;
        }
        return this;
      }

      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_Send_descriptor;
      }

      @Override
      public Send getDefaultInstanceForType() {
        return Send.getDefaultInstance();
      }

      @Override
      public Send build() {
        Send result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public Send buildPartial() {
        Send result = new Send(this);
        result.target_ = target_;
        if (commandsBuilder_ == null) {
          result.commands_ = commands_;
        } else {
          result.commands_ = commandsBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof Send) {
          return mergeFrom((Send)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(Send other) {
        if (other == Send.getDefaultInstance()) return this;
        if (other.getTarget() != 0) {
          setTarget(other.getTarget());
        }
        if (other.hasCommands()) {
          mergeCommands(other.getCommands());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Send parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (Send) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int target_ ;
      /**
       * <code>int32 target = 1;</code>
       */
      public int getTarget() {
        return target_;
      }
      /**
       * <code>int32 target = 1;</code>
       */
      public Builder setTarget(int value) {
        
        target_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 target = 1;</code>
       */
      public Builder clearTarget() {
        
        target_ = 0;
        onChanged();
        return this;
      }

      private Commands commands_;
      private com.google.protobuf.SingleFieldBuilderV3<
          Commands, Commands.Builder, CommandsOrBuilder> commandsBuilder_;
      /**
       * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
       */
      public boolean hasCommands() {
        return commandsBuilder_ != null || commands_ != null;
      }
      /**
       * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
       */
      public Commands getCommands() {
        if (commandsBuilder_ == null) {
          return commands_ == null ? Commands.getDefaultInstance() : commands_;
        } else {
          return commandsBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
       */
      public Builder setCommands(Commands value) {
        if (commandsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          commands_ = value;
          onChanged();
        } else {
          commandsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
       */
      public Builder setCommands(
          Commands.Builder builderForValue) {
        if (commandsBuilder_ == null) {
          commands_ = builderForValue.build();
          onChanged();
        } else {
          commandsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
       */
      public Builder mergeCommands(Commands value) {
        if (commandsBuilder_ == null) {
          if (commands_ != null) {
            commands_ =
              Commands.newBuilder(commands_).mergeFrom(value).buildPartial();
          } else {
            commands_ = value;
          }
          onChanged();
        } else {
          commandsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
       */
      public Builder clearCommands() {
        if (commandsBuilder_ == null) {
          commands_ = null;
          onChanged();
        } else {
          commands_ = null;
          commandsBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
       */
      public Commands.Builder getCommandsBuilder() {
        
        onChanged();
        return getCommandsFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
       */
      public CommandsOrBuilder getCommandsOrBuilder() {
        if (commandsBuilder_ != null) {
          return commandsBuilder_.getMessageOrBuilder();
        } else {
          return commands_ == null ?
              Commands.getDefaultInstance() : commands_;
        }
      }
      /**
       * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          Commands, Commands.Builder, CommandsOrBuilder>
          getCommandsFieldBuilder() {
        if (commandsBuilder_ == null) {
          commandsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              Commands, Commands.Builder, CommandsOrBuilder>(
                  getCommands(),
                  getParentForChildren(),
                  isClean());
          commands_ = null;
        }
        return commandsBuilder_;
      }
      @Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.flink.statefun.e2e.smoke.Command.Send)
    }

    // @@protoc_insertion_point(class_scope:org.apache.flink.statefun.e2e.smoke.Command.Send)
    private static final Send DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Send();
    }

    public static Send getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Send>
        PARSER = new com.google.protobuf.AbstractParser<Send>() {
      @Override
      public Send parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Send(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Send> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<Send> getParserForType() {
      return PARSER;
    }

    @Override
    public Send getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SendAfterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.flink.statefun.e2e.smoke.Command.SendAfter)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>int32 target = 1;</code>
     */
    int getTarget();

    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
     */
    boolean hasCommands();
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
     */
    Commands getCommands();
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
     */
    CommandsOrBuilder getCommandsOrBuilder();
  }
  /**
   * Protobuf type {@code org.apache.flink.statefun.e2e.smoke.Command.SendAfter}
   */
  public  static final class SendAfter extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.flink.statefun.e2e.smoke.Command.SendAfter)
      SendAfterOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SendAfter.newBuilder() to construct.
    private SendAfter(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SendAfter() {
    }

    @Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private SendAfter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              target_ = input.readInt32();
              break;
            }
            case 18: {
              Commands.Builder subBuilder = null;
              if (commands_ != null) {
                subBuilder = commands_.toBuilder();
              }
              commands_ = input.readMessage(Commands.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(commands_);
                commands_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_SendAfter_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_SendAfter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              SendAfter.class, Builder.class);
    }

    public static final int TARGET_FIELD_NUMBER = 1;
    private int target_;
    /**
     * <code>int32 target = 1;</code>
     */
    public int getTarget() {
      return target_;
    }

    public static final int COMMANDS_FIELD_NUMBER = 2;
    private Commands commands_;
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
     */
    public boolean hasCommands() {
      return commands_ != null;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
     */
    public Commands getCommands() {
      return commands_ == null ? Commands.getDefaultInstance() : commands_;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
     */
    public CommandsOrBuilder getCommandsOrBuilder() {
      return getCommands();
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (target_ != 0) {
        output.writeInt32(1, target_);
      }
      if (commands_ != null) {
        output.writeMessage(2, getCommands());
      }
      unknownFields.writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (target_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, target_);
      }
      if (commands_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getCommands());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof SendAfter)) {
        return super.equals(obj);
      }
      SendAfter other = (SendAfter) obj;

      if (getTarget()
          != other.getTarget()) return false;
      if (hasCommands() != other.hasCommands()) return false;
      if (hasCommands()) {
        if (!getCommands()
            .equals(other.getCommands())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TARGET_FIELD_NUMBER;
      hash = (53 * hash) + getTarget();
      if (hasCommands()) {
        hash = (37 * hash) + COMMANDS_FIELD_NUMBER;
        hash = (53 * hash) + getCommands().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static SendAfter parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SendAfter parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SendAfter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SendAfter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SendAfter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SendAfter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SendAfter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SendAfter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static SendAfter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static SendAfter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static SendAfter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SendAfter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(SendAfter prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.flink.statefun.e2e.smoke.Command.SendAfter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.flink.statefun.e2e.smoke.Command.SendAfter)
        SendAfterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_SendAfter_descriptor;
      }

      @Override
      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_SendAfter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                SendAfter.class, Builder.class);
      }

      // Construct using org.apache.flink.statefun.e2e.smoke.generated.Command.SendAfter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @Override
      public Builder clear() {
        super.clear();
        target_ = 0;

        if (commandsBuilder_ == null) {
          commands_ = null;
        } else {
          commands_ = null;
          commandsBuilder_ = null;
        }
        return this;
      }

      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_SendAfter_descriptor;
      }

      @Override
      public SendAfter getDefaultInstanceForType() {
        return SendAfter.getDefaultInstance();
      }

      @Override
      public SendAfter build() {
        SendAfter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public SendAfter buildPartial() {
        SendAfter result = new SendAfter(this);
        result.target_ = target_;
        if (commandsBuilder_ == null) {
          result.commands_ = commands_;
        } else {
          result.commands_ = commandsBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SendAfter) {
          return mergeFrom((SendAfter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(SendAfter other) {
        if (other == SendAfter.getDefaultInstance()) return this;
        if (other.getTarget() != 0) {
          setTarget(other.getTarget());
        }
        if (other.hasCommands()) {
          mergeCommands(other.getCommands());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        SendAfter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (SendAfter) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int target_ ;
      /**
       * <code>int32 target = 1;</code>
       */
      public int getTarget() {
        return target_;
      }
      /**
       * <code>int32 target = 1;</code>
       */
      public Builder setTarget(int value) {
        
        target_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 target = 1;</code>
       */
      public Builder clearTarget() {
        
        target_ = 0;
        onChanged();
        return this;
      }

      private Commands commands_;
      private com.google.protobuf.SingleFieldBuilderV3<
          Commands, Commands.Builder, CommandsOrBuilder> commandsBuilder_;
      /**
       * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
       */
      public boolean hasCommands() {
        return commandsBuilder_ != null || commands_ != null;
      }
      /**
       * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
       */
      public Commands getCommands() {
        if (commandsBuilder_ == null) {
          return commands_ == null ? Commands.getDefaultInstance() : commands_;
        } else {
          return commandsBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
       */
      public Builder setCommands(Commands value) {
        if (commandsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          commands_ = value;
          onChanged();
        } else {
          commandsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
       */
      public Builder setCommands(
          Commands.Builder builderForValue) {
        if (commandsBuilder_ == null) {
          commands_ = builderForValue.build();
          onChanged();
        } else {
          commandsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
       */
      public Builder mergeCommands(Commands value) {
        if (commandsBuilder_ == null) {
          if (commands_ != null) {
            commands_ =
              Commands.newBuilder(commands_).mergeFrom(value).buildPartial();
          } else {
            commands_ = value;
          }
          onChanged();
        } else {
          commandsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
       */
      public Builder clearCommands() {
        if (commandsBuilder_ == null) {
          commands_ = null;
          onChanged();
        } else {
          commands_ = null;
          commandsBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
       */
      public Commands.Builder getCommandsBuilder() {
        
        onChanged();
        return getCommandsFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
       */
      public CommandsOrBuilder getCommandsOrBuilder() {
        if (commandsBuilder_ != null) {
          return commandsBuilder_.getMessageOrBuilder();
        } else {
          return commands_ == null ?
              Commands.getDefaultInstance() : commands_;
        }
      }
      /**
       * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          Commands, Commands.Builder, CommandsOrBuilder>
          getCommandsFieldBuilder() {
        if (commandsBuilder_ == null) {
          commandsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              Commands, Commands.Builder, CommandsOrBuilder>(
                  getCommands(),
                  getParentForChildren(),
                  isClean());
          commands_ = null;
        }
        return commandsBuilder_;
      }
      @Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.flink.statefun.e2e.smoke.Command.SendAfter)
    }

    // @@protoc_insertion_point(class_scope:org.apache.flink.statefun.e2e.smoke.Command.SendAfter)
    private static final SendAfter DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new SendAfter();
    }

    public static SendAfter getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SendAfter>
        PARSER = new com.google.protobuf.AbstractParser<SendAfter>() {
      @Override
      public SendAfter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SendAfter(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<SendAfter> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<SendAfter> getParserForType() {
      return PARSER;
    }

    @Override
    public SendAfter getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SendEgressOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.flink.statefun.e2e.smoke.Command.SendEgress)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code org.apache.flink.statefun.e2e.smoke.Command.SendEgress}
   */
  public  static final class SendEgress extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.flink.statefun.e2e.smoke.Command.SendEgress)
      SendEgressOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SendEgress.newBuilder() to construct.
    private SendEgress(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SendEgress() {
    }

    @Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private SendEgress(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_SendEgress_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_SendEgress_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              SendEgress.class, Builder.class);
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      unknownFields.writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof SendEgress)) {
        return super.equals(obj);
      }
      SendEgress other = (SendEgress) obj;

      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static SendEgress parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SendEgress parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SendEgress parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SendEgress parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SendEgress parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SendEgress parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SendEgress parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SendEgress parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static SendEgress parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static SendEgress parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static SendEgress parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SendEgress parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(SendEgress prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.flink.statefun.e2e.smoke.Command.SendEgress}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.flink.statefun.e2e.smoke.Command.SendEgress)
        SendEgressOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_SendEgress_descriptor;
      }

      @Override
      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_SendEgress_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                SendEgress.class, Builder.class);
      }

      // Construct using org.apache.flink.statefun.e2e.smoke.generated.Command.SendEgress.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @Override
      public Builder clear() {
        super.clear();
        return this;
      }

      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_SendEgress_descriptor;
      }

      @Override
      public SendEgress getDefaultInstanceForType() {
        return SendEgress.getDefaultInstance();
      }

      @Override
      public SendEgress build() {
        SendEgress result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public SendEgress buildPartial() {
        SendEgress result = new SendEgress(this);
        onBuilt();
        return result;
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SendEgress) {
          return mergeFrom((SendEgress)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(SendEgress other) {
        if (other == SendEgress.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        SendEgress parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (SendEgress) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      @Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.flink.statefun.e2e.smoke.Command.SendEgress)
    }

    // @@protoc_insertion_point(class_scope:org.apache.flink.statefun.e2e.smoke.Command.SendEgress)
    private static final SendEgress DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new SendEgress();
    }

    public static SendEgress getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SendEgress>
        PARSER = new com.google.protobuf.AbstractParser<SendEgress>() {
      @Override
      public SendEgress parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SendEgress(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<SendEgress> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<SendEgress> getParserForType() {
      return PARSER;
    }

    @Override
    public SendEgress getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface AsyncOperationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>bool failure = 1;</code>
     */
    boolean getFailure();

    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Commands resolved_commands = 2;</code>
     */
    boolean hasResolvedCommands();
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Commands resolved_commands = 2;</code>
     */
    Commands getResolvedCommands();
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Commands resolved_commands = 2;</code>
     */
    CommandsOrBuilder getResolvedCommandsOrBuilder();
  }
  /**
   * Protobuf type {@code org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation}
   */
  public  static final class AsyncOperation extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation)
      AsyncOperationOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use AsyncOperation.newBuilder() to construct.
    private AsyncOperation(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private AsyncOperation() {
    }

    @Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private AsyncOperation(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              failure_ = input.readBool();
              break;
            }
            case 18: {
              Commands.Builder subBuilder = null;
              if (resolvedCommands_ != null) {
                subBuilder = resolvedCommands_.toBuilder();
              }
              resolvedCommands_ = input.readMessage(Commands.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(resolvedCommands_);
                resolvedCommands_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_AsyncOperation_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_AsyncOperation_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              AsyncOperation.class, Builder.class);
    }

    public static final int FAILURE_FIELD_NUMBER = 1;
    private boolean failure_;
    /**
     * <code>bool failure = 1;</code>
     */
    public boolean getFailure() {
      return failure_;
    }

    public static final int RESOLVED_COMMANDS_FIELD_NUMBER = 2;
    private Commands resolvedCommands_;
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Commands resolved_commands = 2;</code>
     */
    public boolean hasResolvedCommands() {
      return resolvedCommands_ != null;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Commands resolved_commands = 2;</code>
     */
    public Commands getResolvedCommands() {
      return resolvedCommands_ == null ? Commands.getDefaultInstance() : resolvedCommands_;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Commands resolved_commands = 2;</code>
     */
    public CommandsOrBuilder getResolvedCommandsOrBuilder() {
      return getResolvedCommands();
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (failure_ != false) {
        output.writeBool(1, failure_);
      }
      if (resolvedCommands_ != null) {
        output.writeMessage(2, getResolvedCommands());
      }
      unknownFields.writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (failure_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, failure_);
      }
      if (resolvedCommands_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getResolvedCommands());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof AsyncOperation)) {
        return super.equals(obj);
      }
      AsyncOperation other = (AsyncOperation) obj;

      if (getFailure()
          != other.getFailure()) return false;
      if (hasResolvedCommands() != other.hasResolvedCommands()) return false;
      if (hasResolvedCommands()) {
        if (!getResolvedCommands()
            .equals(other.getResolvedCommands())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + FAILURE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getFailure());
      if (hasResolvedCommands()) {
        hash = (37 * hash) + RESOLVED_COMMANDS_FIELD_NUMBER;
        hash = (53 * hash) + getResolvedCommands().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static AsyncOperation parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static AsyncOperation parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static AsyncOperation parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static AsyncOperation parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static AsyncOperation parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static AsyncOperation parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static AsyncOperation parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static AsyncOperation parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static AsyncOperation parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static AsyncOperation parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static AsyncOperation parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static AsyncOperation parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(AsyncOperation prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation)
        AsyncOperationOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_AsyncOperation_descriptor;
      }

      @Override
      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_AsyncOperation_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                AsyncOperation.class, Builder.class);
      }

      // Construct using org.apache.flink.statefun.e2e.smoke.generated.Command.AsyncOperation.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @Override
      public Builder clear() {
        super.clear();
        failure_ = false;

        if (resolvedCommandsBuilder_ == null) {
          resolvedCommands_ = null;
        } else {
          resolvedCommands_ = null;
          resolvedCommandsBuilder_ = null;
        }
        return this;
      }

      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_AsyncOperation_descriptor;
      }

      @Override
      public AsyncOperation getDefaultInstanceForType() {
        return AsyncOperation.getDefaultInstance();
      }

      @Override
      public AsyncOperation build() {
        AsyncOperation result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public AsyncOperation buildPartial() {
        AsyncOperation result = new AsyncOperation(this);
        result.failure_ = failure_;
        if (resolvedCommandsBuilder_ == null) {
          result.resolvedCommands_ = resolvedCommands_;
        } else {
          result.resolvedCommands_ = resolvedCommandsBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof AsyncOperation) {
          return mergeFrom((AsyncOperation)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(AsyncOperation other) {
        if (other == AsyncOperation.getDefaultInstance()) return this;
        if (other.getFailure() != false) {
          setFailure(other.getFailure());
        }
        if (other.hasResolvedCommands()) {
          mergeResolvedCommands(other.getResolvedCommands());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        AsyncOperation parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (AsyncOperation) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private boolean failure_ ;
      /**
       * <code>bool failure = 1;</code>
       */
      public boolean getFailure() {
        return failure_;
      }
      /**
       * <code>bool failure = 1;</code>
       */
      public Builder setFailure(boolean value) {
        
        failure_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bool failure = 1;</code>
       */
      public Builder clearFailure() {
        
        failure_ = false;
        onChanged();
        return this;
      }

      private Commands resolvedCommands_;
      private com.google.protobuf.SingleFieldBuilderV3<
          Commands, Commands.Builder, CommandsOrBuilder> resolvedCommandsBuilder_;
      /**
       * <code>.org.apache.flink.statefun.e2e.smoke.Commands resolved_commands = 2;</code>
       */
      public boolean hasResolvedCommands() {
        return resolvedCommandsBuilder_ != null || resolvedCommands_ != null;
      }
      /**
       * <code>.org.apache.flink.statefun.e2e.smoke.Commands resolved_commands = 2;</code>
       */
      public Commands getResolvedCommands() {
        if (resolvedCommandsBuilder_ == null) {
          return resolvedCommands_ == null ? Commands.getDefaultInstance() : resolvedCommands_;
        } else {
          return resolvedCommandsBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.apache.flink.statefun.e2e.smoke.Commands resolved_commands = 2;</code>
       */
      public Builder setResolvedCommands(Commands value) {
        if (resolvedCommandsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          resolvedCommands_ = value;
          onChanged();
        } else {
          resolvedCommandsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.org.apache.flink.statefun.e2e.smoke.Commands resolved_commands = 2;</code>
       */
      public Builder setResolvedCommands(
          Commands.Builder builderForValue) {
        if (resolvedCommandsBuilder_ == null) {
          resolvedCommands_ = builderForValue.build();
          onChanged();
        } else {
          resolvedCommandsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.org.apache.flink.statefun.e2e.smoke.Commands resolved_commands = 2;</code>
       */
      public Builder mergeResolvedCommands(Commands value) {
        if (resolvedCommandsBuilder_ == null) {
          if (resolvedCommands_ != null) {
            resolvedCommands_ =
              Commands.newBuilder(resolvedCommands_).mergeFrom(value).buildPartial();
          } else {
            resolvedCommands_ = value;
          }
          onChanged();
        } else {
          resolvedCommandsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.org.apache.flink.statefun.e2e.smoke.Commands resolved_commands = 2;</code>
       */
      public Builder clearResolvedCommands() {
        if (resolvedCommandsBuilder_ == null) {
          resolvedCommands_ = null;
          onChanged();
        } else {
          resolvedCommands_ = null;
          resolvedCommandsBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.org.apache.flink.statefun.e2e.smoke.Commands resolved_commands = 2;</code>
       */
      public Commands.Builder getResolvedCommandsBuilder() {
        
        onChanged();
        return getResolvedCommandsFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.flink.statefun.e2e.smoke.Commands resolved_commands = 2;</code>
       */
      public CommandsOrBuilder getResolvedCommandsOrBuilder() {
        if (resolvedCommandsBuilder_ != null) {
          return resolvedCommandsBuilder_.getMessageOrBuilder();
        } else {
          return resolvedCommands_ == null ?
              Commands.getDefaultInstance() : resolvedCommands_;
        }
      }
      /**
       * <code>.org.apache.flink.statefun.e2e.smoke.Commands resolved_commands = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          Commands, Commands.Builder, CommandsOrBuilder>
          getResolvedCommandsFieldBuilder() {
        if (resolvedCommandsBuilder_ == null) {
          resolvedCommandsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              Commands, Commands.Builder, CommandsOrBuilder>(
                  getResolvedCommands(),
                  getParentForChildren(),
                  isClean());
          resolvedCommands_ = null;
        }
        return resolvedCommandsBuilder_;
      }
      @Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation)
    }

    // @@protoc_insertion_point(class_scope:org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation)
    private static final AsyncOperation DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new AsyncOperation();
    }

    public static AsyncOperation getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<AsyncOperation>
        PARSER = new com.google.protobuf.AbstractParser<AsyncOperation>() {
      @Override
      public AsyncOperation parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new AsyncOperation(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<AsyncOperation> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<AsyncOperation> getParserForType() {
      return PARSER;
    }

    @Override
    public AsyncOperation getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface VerifyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.flink.statefun.e2e.smoke.Command.Verify)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>int64 expected = 1;</code>
     */
    long getExpected();
  }
  /**
   * Protobuf type {@code org.apache.flink.statefun.e2e.smoke.Command.Verify}
   */
  public  static final class Verify extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.flink.statefun.e2e.smoke.Command.Verify)
      VerifyOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Verify.newBuilder() to construct.
    private Verify(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Verify() {
    }

    @Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Verify(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              expected_ = input.readInt64();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_Verify_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_Verify_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Verify.class, Builder.class);
    }

    public static final int EXPECTED_FIELD_NUMBER = 1;
    private long expected_;
    /**
     * <code>int64 expected = 1;</code>
     */
    public long getExpected() {
      return expected_;
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (expected_ != 0L) {
        output.writeInt64(1, expected_);
      }
      unknownFields.writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (expected_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, expected_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof Verify)) {
        return super.equals(obj);
      }
      Verify other = (Verify) obj;

      if (getExpected()
          != other.getExpected()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + EXPECTED_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getExpected());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static Verify parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Verify parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Verify parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Verify parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Verify parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Verify parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Verify parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Verify parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static Verify parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static Verify parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static Verify parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Verify parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(Verify prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.flink.statefun.e2e.smoke.Command.Verify}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.flink.statefun.e2e.smoke.Command.Verify)
        VerifyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_Verify_descriptor;
      }

      @Override
      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_Verify_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Verify.class, Builder.class);
      }

      // Construct using org.apache.flink.statefun.e2e.smoke.generated.Command.Verify.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @Override
      public Builder clear() {
        super.clear();
        expected_ = 0L;

        return this;
      }

      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_Verify_descriptor;
      }

      @Override
      public Verify getDefaultInstanceForType() {
        return Verify.getDefaultInstance();
      }

      @Override
      public Verify build() {
        Verify result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public Verify buildPartial() {
        Verify result = new Verify(this);
        result.expected_ = expected_;
        onBuilt();
        return result;
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof Verify) {
          return mergeFrom((Verify)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(Verify other) {
        if (other == Verify.getDefaultInstance()) return this;
        if (other.getExpected() != 0L) {
          setExpected(other.getExpected());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Verify parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (Verify) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private long expected_ ;
      /**
       * <code>int64 expected = 1;</code>
       */
      public long getExpected() {
        return expected_;
      }
      /**
       * <code>int64 expected = 1;</code>
       */
      public Builder setExpected(long value) {
        
        expected_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int64 expected = 1;</code>
       */
      public Builder clearExpected() {
        
        expected_ = 0L;
        onChanged();
        return this;
      }
      @Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.flink.statefun.e2e.smoke.Command.Verify)
    }

    // @@protoc_insertion_point(class_scope:org.apache.flink.statefun.e2e.smoke.Command.Verify)
    private static final Verify DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Verify();
    }

    public static Verify getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Verify>
        PARSER = new com.google.protobuf.AbstractParser<Verify>() {
      @Override
      public Verify parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Verify(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Verify> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<Verify> getParserForType() {
      return PARSER;
    }

    @Override
    public Verify getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private int commandCase_ = 0;
  private Object command_;
  public enum CommandCase
      implements com.google.protobuf.Internal.EnumLite {
    INCREMENT(1),
    SEND(2),
    SEND_AFTER(3),
    SEND_EGRESS(4),
    ASYNC_OPERATION(5),
    VERIFY(6),
    COMMAND_NOT_SET(0);
    private final int value;
    private CommandCase(int value) {
      this.value = value;
    }
    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @Deprecated
    public static CommandCase valueOf(int value) {
      return forNumber(value);
    }

    public static CommandCase forNumber(int value) {
      switch (value) {
        case 1: return INCREMENT;
        case 2: return SEND;
        case 3: return SEND_AFTER;
        case 4: return SEND_EGRESS;
        case 5: return ASYNC_OPERATION;
        case 6: return VERIFY;
        case 0: return COMMAND_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public CommandCase
  getCommandCase() {
    return CommandCase.forNumber(
        commandCase_);
  }

  public static final int INCREMENT_FIELD_NUMBER = 1;
  /**
   * <code>.org.apache.flink.statefun.e2e.smoke.Command.IncrementState increment = 1;</code>
   */
  public boolean hasIncrement() {
    return commandCase_ == 1;
  }
  /**
   * <code>.org.apache.flink.statefun.e2e.smoke.Command.IncrementState increment = 1;</code>
   */
  public IncrementState getIncrement() {
    if (commandCase_ == 1) {
       return (IncrementState) command_;
    }
    return IncrementState.getDefaultInstance();
  }
  /**
   * <code>.org.apache.flink.statefun.e2e.smoke.Command.IncrementState increment = 1;</code>
   */
  public IncrementStateOrBuilder getIncrementOrBuilder() {
    if (commandCase_ == 1) {
       return (IncrementState) command_;
    }
    return IncrementState.getDefaultInstance();
  }

  public static final int SEND_FIELD_NUMBER = 2;
  /**
   * <code>.org.apache.flink.statefun.e2e.smoke.Command.Send send = 2;</code>
   */
  public boolean hasSend() {
    return commandCase_ == 2;
  }
  /**
   * <code>.org.apache.flink.statefun.e2e.smoke.Command.Send send = 2;</code>
   */
  public Send getSend() {
    if (commandCase_ == 2) {
       return (Send) command_;
    }
    return Send.getDefaultInstance();
  }
  /**
   * <code>.org.apache.flink.statefun.e2e.smoke.Command.Send send = 2;</code>
   */
  public SendOrBuilder getSendOrBuilder() {
    if (commandCase_ == 2) {
       return (Send) command_;
    }
    return Send.getDefaultInstance();
  }

  public static final int SEND_AFTER_FIELD_NUMBER = 3;
  /**
   * <code>.org.apache.flink.statefun.e2e.smoke.Command.SendAfter send_after = 3;</code>
   */
  public boolean hasSendAfter() {
    return commandCase_ == 3;
  }
  /**
   * <code>.org.apache.flink.statefun.e2e.smoke.Command.SendAfter send_after = 3;</code>
   */
  public SendAfter getSendAfter() {
    if (commandCase_ == 3) {
       return (SendAfter) command_;
    }
    return SendAfter.getDefaultInstance();
  }
  /**
   * <code>.org.apache.flink.statefun.e2e.smoke.Command.SendAfter send_after = 3;</code>
   */
  public SendAfterOrBuilder getSendAfterOrBuilder() {
    if (commandCase_ == 3) {
       return (SendAfter) command_;
    }
    return SendAfter.getDefaultInstance();
  }

  public static final int SEND_EGRESS_FIELD_NUMBER = 4;
  /**
   * <code>.org.apache.flink.statefun.e2e.smoke.Command.SendEgress send_egress = 4;</code>
   */
  public boolean hasSendEgress() {
    return commandCase_ == 4;
  }
  /**
   * <code>.org.apache.flink.statefun.e2e.smoke.Command.SendEgress send_egress = 4;</code>
   */
  public SendEgress getSendEgress() {
    if (commandCase_ == 4) {
       return (SendEgress) command_;
    }
    return SendEgress.getDefaultInstance();
  }
  /**
   * <code>.org.apache.flink.statefun.e2e.smoke.Command.SendEgress send_egress = 4;</code>
   */
  public SendEgressOrBuilder getSendEgressOrBuilder() {
    if (commandCase_ == 4) {
       return (SendEgress) command_;
    }
    return SendEgress.getDefaultInstance();
  }

  public static final int ASYNC_OPERATION_FIELD_NUMBER = 5;
  /**
   * <code>.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation async_operation = 5;</code>
   */
  public boolean hasAsyncOperation() {
    return commandCase_ == 5;
  }
  /**
   * <code>.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation async_operation = 5;</code>
   */
  public AsyncOperation getAsyncOperation() {
    if (commandCase_ == 5) {
       return (AsyncOperation) command_;
    }
    return AsyncOperation.getDefaultInstance();
  }
  /**
   * <code>.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation async_operation = 5;</code>
   */
  public AsyncOperationOrBuilder getAsyncOperationOrBuilder() {
    if (commandCase_ == 5) {
       return (AsyncOperation) command_;
    }
    return AsyncOperation.getDefaultInstance();
  }

  public static final int VERIFY_FIELD_NUMBER = 6;
  /**
   * <code>.org.apache.flink.statefun.e2e.smoke.Command.Verify verify = 6;</code>
   */
  public boolean hasVerify() {
    return commandCase_ == 6;
  }
  /**
   * <code>.org.apache.flink.statefun.e2e.smoke.Command.Verify verify = 6;</code>
   */
  public Verify getVerify() {
    if (commandCase_ == 6) {
       return (Verify) command_;
    }
    return Verify.getDefaultInstance();
  }
  /**
   * <code>.org.apache.flink.statefun.e2e.smoke.Command.Verify verify = 6;</code>
   */
  public VerifyOrBuilder getVerifyOrBuilder() {
    if (commandCase_ == 6) {
       return (Verify) command_;
    }
    return Verify.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  @Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (commandCase_ == 1) {
      output.writeMessage(1, (IncrementState) command_);
    }
    if (commandCase_ == 2) {
      output.writeMessage(2, (Send) command_);
    }
    if (commandCase_ == 3) {
      output.writeMessage(3, (SendAfter) command_);
    }
    if (commandCase_ == 4) {
      output.writeMessage(4, (SendEgress) command_);
    }
    if (commandCase_ == 5) {
      output.writeMessage(5, (AsyncOperation) command_);
    }
    if (commandCase_ == 6) {
      output.writeMessage(6, (Verify) command_);
    }
    unknownFields.writeTo(output);
  }

  @Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (commandCase_ == 1) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, (IncrementState) command_);
    }
    if (commandCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (Send) command_);
    }
    if (commandCase_ == 3) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, (SendAfter) command_);
    }
    if (commandCase_ == 4) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, (SendEgress) command_);
    }
    if (commandCase_ == 5) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, (AsyncOperation) command_);
    }
    if (commandCase_ == 6) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, (Verify) command_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof Command)) {
      return super.equals(obj);
    }
    Command other = (Command) obj;

    if (!getCommandCase().equals(other.getCommandCase())) return false;
    switch (commandCase_) {
      case 1:
        if (!getIncrement()
            .equals(other.getIncrement())) return false;
        break;
      case 2:
        if (!getSend()
            .equals(other.getSend())) return false;
        break;
      case 3:
        if (!getSendAfter()
            .equals(other.getSendAfter())) return false;
        break;
      case 4:
        if (!getSendEgress()
            .equals(other.getSendEgress())) return false;
        break;
      case 5:
        if (!getAsyncOperation()
            .equals(other.getAsyncOperation())) return false;
        break;
      case 6:
        if (!getVerify()
            .equals(other.getVerify())) return false;
        break;
      case 0:
      default:
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    switch (commandCase_) {
      case 1:
        hash = (37 * hash) + INCREMENT_FIELD_NUMBER;
        hash = (53 * hash) + getIncrement().hashCode();
        break;
      case 2:
        hash = (37 * hash) + SEND_FIELD_NUMBER;
        hash = (53 * hash) + getSend().hashCode();
        break;
      case 3:
        hash = (37 * hash) + SEND_AFTER_FIELD_NUMBER;
        hash = (53 * hash) + getSendAfter().hashCode();
        break;
      case 4:
        hash = (37 * hash) + SEND_EGRESS_FIELD_NUMBER;
        hash = (53 * hash) + getSendEgress().hashCode();
        break;
      case 5:
        hash = (37 * hash) + ASYNC_OPERATION_FIELD_NUMBER;
        hash = (53 * hash) + getAsyncOperation().hashCode();
        break;
      case 6:
        hash = (37 * hash) + VERIFY_FIELD_NUMBER;
        hash = (53 * hash) + getVerify().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static Command parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static Command parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static Command parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static Command parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static Command parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static Command parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static Command parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static Command parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static Command parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static Command parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static Command parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static Command parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(Command prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(
      BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code org.apache.flink.statefun.e2e.smoke.Command}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:org.apache.flink.statefun.e2e.smoke.Command)
      CommandOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Command.class, Builder.class);
    }

    // Construct using org.apache.flink.statefun.e2e.smoke.generated.Command.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @Override
    public Builder clear() {
      super.clear();
      commandCase_ = 0;
      command_ = null;
      return this;
    }

    @Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_descriptor;
    }

    @Override
    public Command getDefaultInstanceForType() {
      return Command.getDefaultInstance();
    }

    @Override
    public Command build() {
      Command result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @Override
    public Command buildPartial() {
      Command result = new Command(this);
      if (commandCase_ == 1) {
        if (incrementBuilder_ == null) {
          result.command_ = command_;
        } else {
          result.command_ = incrementBuilder_.build();
        }
      }
      if (commandCase_ == 2) {
        if (sendBuilder_ == null) {
          result.command_ = command_;
        } else {
          result.command_ = sendBuilder_.build();
        }
      }
      if (commandCase_ == 3) {
        if (sendAfterBuilder_ == null) {
          result.command_ = command_;
        } else {
          result.command_ = sendAfterBuilder_.build();
        }
      }
      if (commandCase_ == 4) {
        if (sendEgressBuilder_ == null) {
          result.command_ = command_;
        } else {
          result.command_ = sendEgressBuilder_.build();
        }
      }
      if (commandCase_ == 5) {
        if (asyncOperationBuilder_ == null) {
          result.command_ = command_;
        } else {
          result.command_ = asyncOperationBuilder_.build();
        }
      }
      if (commandCase_ == 6) {
        if (verifyBuilder_ == null) {
          result.command_ = command_;
        } else {
          result.command_ = verifyBuilder_.build();
        }
      }
      result.commandCase_ = commandCase_;
      onBuilt();
      return result;
    }

    @Override
    public Builder clone() {
      return super.clone();
    }
    @Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.setField(field, value);
    }
    @Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.addRepeatedField(field, value);
    }
    @Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof Command) {
        return mergeFrom((Command)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(Command other) {
      if (other == Command.getDefaultInstance()) return this;
      switch (other.getCommandCase()) {
        case INCREMENT: {
          mergeIncrement(other.getIncrement());
          break;
        }
        case SEND: {
          mergeSend(other.getSend());
          break;
        }
        case SEND_AFTER: {
          mergeSendAfter(other.getSendAfter());
          break;
        }
        case SEND_EGRESS: {
          mergeSendEgress(other.getSendEgress());
          break;
        }
        case ASYNC_OPERATION: {
          mergeAsyncOperation(other.getAsyncOperation());
          break;
        }
        case VERIFY: {
          mergeVerify(other.getVerify());
          break;
        }
        case COMMAND_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @Override
    public final boolean isInitialized() {
      return true;
    }

    @Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Command parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (Command) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int commandCase_ = 0;
    private Object command_;
    public CommandCase
        getCommandCase() {
      return CommandCase.forNumber(
          commandCase_);
    }

    public Builder clearCommand() {
      commandCase_ = 0;
      command_ = null;
      onChanged();
      return this;
    }


    private com.google.protobuf.SingleFieldBuilderV3<
        IncrementState, IncrementState.Builder, IncrementStateOrBuilder> incrementBuilder_;
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.IncrementState increment = 1;</code>
     */
    public boolean hasIncrement() {
      return commandCase_ == 1;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.IncrementState increment = 1;</code>
     */
    public IncrementState getIncrement() {
      if (incrementBuilder_ == null) {
        if (commandCase_ == 1) {
          return (IncrementState) command_;
        }
        return IncrementState.getDefaultInstance();
      } else {
        if (commandCase_ == 1) {
          return incrementBuilder_.getMessage();
        }
        return IncrementState.getDefaultInstance();
      }
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.IncrementState increment = 1;</code>
     */
    public Builder setIncrement(IncrementState value) {
      if (incrementBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        command_ = value;
        onChanged();
      } else {
        incrementBuilder_.setMessage(value);
      }
      commandCase_ = 1;
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.IncrementState increment = 1;</code>
     */
    public Builder setIncrement(
        IncrementState.Builder builderForValue) {
      if (incrementBuilder_ == null) {
        command_ = builderForValue.build();
        onChanged();
      } else {
        incrementBuilder_.setMessage(builderForValue.build());
      }
      commandCase_ = 1;
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.IncrementState increment = 1;</code>
     */
    public Builder mergeIncrement(IncrementState value) {
      if (incrementBuilder_ == null) {
        if (commandCase_ == 1 &&
            command_ != IncrementState.getDefaultInstance()) {
          command_ = IncrementState.newBuilder((IncrementState) command_)
              .mergeFrom(value).buildPartial();
        } else {
          command_ = value;
        }
        onChanged();
      } else {
        if (commandCase_ == 1) {
          incrementBuilder_.mergeFrom(value);
        }
        incrementBuilder_.setMessage(value);
      }
      commandCase_ = 1;
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.IncrementState increment = 1;</code>
     */
    public Builder clearIncrement() {
      if (incrementBuilder_ == null) {
        if (commandCase_ == 1) {
          commandCase_ = 0;
          command_ = null;
          onChanged();
        }
      } else {
        if (commandCase_ == 1) {
          commandCase_ = 0;
          command_ = null;
        }
        incrementBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.IncrementState increment = 1;</code>
     */
    public IncrementState.Builder getIncrementBuilder() {
      return getIncrementFieldBuilder().getBuilder();
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.IncrementState increment = 1;</code>
     */
    public IncrementStateOrBuilder getIncrementOrBuilder() {
      if ((commandCase_ == 1) && (incrementBuilder_ != null)) {
        return incrementBuilder_.getMessageOrBuilder();
      } else {
        if (commandCase_ == 1) {
          return (IncrementState) command_;
        }
        return IncrementState.getDefaultInstance();
      }
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.IncrementState increment = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        IncrementState, IncrementState.Builder, IncrementStateOrBuilder>
        getIncrementFieldBuilder() {
      if (incrementBuilder_ == null) {
        if (!(commandCase_ == 1)) {
          command_ = IncrementState.getDefaultInstance();
        }
        incrementBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            IncrementState, IncrementState.Builder, IncrementStateOrBuilder>(
                (IncrementState) command_,
                getParentForChildren(),
                isClean());
        command_ = null;
      }
      commandCase_ = 1;
      onChanged();;
      return incrementBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        Send, Send.Builder, SendOrBuilder> sendBuilder_;
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.Send send = 2;</code>
     */
    public boolean hasSend() {
      return commandCase_ == 2;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.Send send = 2;</code>
     */
    public Send getSend() {
      if (sendBuilder_ == null) {
        if (commandCase_ == 2) {
          return (Send) command_;
        }
        return Send.getDefaultInstance();
      } else {
        if (commandCase_ == 2) {
          return sendBuilder_.getMessage();
        }
        return Send.getDefaultInstance();
      }
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.Send send = 2;</code>
     */
    public Builder setSend(Send value) {
      if (sendBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        command_ = value;
        onChanged();
      } else {
        sendBuilder_.setMessage(value);
      }
      commandCase_ = 2;
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.Send send = 2;</code>
     */
    public Builder setSend(
        Send.Builder builderForValue) {
      if (sendBuilder_ == null) {
        command_ = builderForValue.build();
        onChanged();
      } else {
        sendBuilder_.setMessage(builderForValue.build());
      }
      commandCase_ = 2;
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.Send send = 2;</code>
     */
    public Builder mergeSend(Send value) {
      if (sendBuilder_ == null) {
        if (commandCase_ == 2 &&
            command_ != Send.getDefaultInstance()) {
          command_ = Send.newBuilder((Send) command_)
              .mergeFrom(value).buildPartial();
        } else {
          command_ = value;
        }
        onChanged();
      } else {
        if (commandCase_ == 2) {
          sendBuilder_.mergeFrom(value);
        }
        sendBuilder_.setMessage(value);
      }
      commandCase_ = 2;
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.Send send = 2;</code>
     */
    public Builder clearSend() {
      if (sendBuilder_ == null) {
        if (commandCase_ == 2) {
          commandCase_ = 0;
          command_ = null;
          onChanged();
        }
      } else {
        if (commandCase_ == 2) {
          commandCase_ = 0;
          command_ = null;
        }
        sendBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.Send send = 2;</code>
     */
    public Send.Builder getSendBuilder() {
      return getSendFieldBuilder().getBuilder();
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.Send send = 2;</code>
     */
    public SendOrBuilder getSendOrBuilder() {
      if ((commandCase_ == 2) && (sendBuilder_ != null)) {
        return sendBuilder_.getMessageOrBuilder();
      } else {
        if (commandCase_ == 2) {
          return (Send) command_;
        }
        return Send.getDefaultInstance();
      }
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.Send send = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        Send, Send.Builder, SendOrBuilder>
        getSendFieldBuilder() {
      if (sendBuilder_ == null) {
        if (!(commandCase_ == 2)) {
          command_ = Send.getDefaultInstance();
        }
        sendBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            Send, Send.Builder, SendOrBuilder>(
                (Send) command_,
                getParentForChildren(),
                isClean());
        command_ = null;
      }
      commandCase_ = 2;
      onChanged();;
      return sendBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        SendAfter, SendAfter.Builder, SendAfterOrBuilder> sendAfterBuilder_;
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.SendAfter send_after = 3;</code>
     */
    public boolean hasSendAfter() {
      return commandCase_ == 3;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.SendAfter send_after = 3;</code>
     */
    public SendAfter getSendAfter() {
      if (sendAfterBuilder_ == null) {
        if (commandCase_ == 3) {
          return (SendAfter) command_;
        }
        return SendAfter.getDefaultInstance();
      } else {
        if (commandCase_ == 3) {
          return sendAfterBuilder_.getMessage();
        }
        return SendAfter.getDefaultInstance();
      }
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.SendAfter send_after = 3;</code>
     */
    public Builder setSendAfter(SendAfter value) {
      if (sendAfterBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        command_ = value;
        onChanged();
      } else {
        sendAfterBuilder_.setMessage(value);
      }
      commandCase_ = 3;
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.SendAfter send_after = 3;</code>
     */
    public Builder setSendAfter(
        SendAfter.Builder builderForValue) {
      if (sendAfterBuilder_ == null) {
        command_ = builderForValue.build();
        onChanged();
      } else {
        sendAfterBuilder_.setMessage(builderForValue.build());
      }
      commandCase_ = 3;
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.SendAfter send_after = 3;</code>
     */
    public Builder mergeSendAfter(SendAfter value) {
      if (sendAfterBuilder_ == null) {
        if (commandCase_ == 3 &&
            command_ != SendAfter.getDefaultInstance()) {
          command_ = SendAfter.newBuilder((SendAfter) command_)
              .mergeFrom(value).buildPartial();
        } else {
          command_ = value;
        }
        onChanged();
      } else {
        if (commandCase_ == 3) {
          sendAfterBuilder_.mergeFrom(value);
        }
        sendAfterBuilder_.setMessage(value);
      }
      commandCase_ = 3;
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.SendAfter send_after = 3;</code>
     */
    public Builder clearSendAfter() {
      if (sendAfterBuilder_ == null) {
        if (commandCase_ == 3) {
          commandCase_ = 0;
          command_ = null;
          onChanged();
        }
      } else {
        if (commandCase_ == 3) {
          commandCase_ = 0;
          command_ = null;
        }
        sendAfterBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.SendAfter send_after = 3;</code>
     */
    public SendAfter.Builder getSendAfterBuilder() {
      return getSendAfterFieldBuilder().getBuilder();
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.SendAfter send_after = 3;</code>
     */
    public SendAfterOrBuilder getSendAfterOrBuilder() {
      if ((commandCase_ == 3) && (sendAfterBuilder_ != null)) {
        return sendAfterBuilder_.getMessageOrBuilder();
      } else {
        if (commandCase_ == 3) {
          return (SendAfter) command_;
        }
        return SendAfter.getDefaultInstance();
      }
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.SendAfter send_after = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        SendAfter, SendAfter.Builder, SendAfterOrBuilder>
        getSendAfterFieldBuilder() {
      if (sendAfterBuilder_ == null) {
        if (!(commandCase_ == 3)) {
          command_ = SendAfter.getDefaultInstance();
        }
        sendAfterBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            SendAfter, SendAfter.Builder, SendAfterOrBuilder>(
                (SendAfter) command_,
                getParentForChildren(),
                isClean());
        command_ = null;
      }
      commandCase_ = 3;
      onChanged();;
      return sendAfterBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        SendEgress, SendEgress.Builder, SendEgressOrBuilder> sendEgressBuilder_;
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.SendEgress send_egress = 4;</code>
     */
    public boolean hasSendEgress() {
      return commandCase_ == 4;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.SendEgress send_egress = 4;</code>
     */
    public SendEgress getSendEgress() {
      if (sendEgressBuilder_ == null) {
        if (commandCase_ == 4) {
          return (SendEgress) command_;
        }
        return SendEgress.getDefaultInstance();
      } else {
        if (commandCase_ == 4) {
          return sendEgressBuilder_.getMessage();
        }
        return SendEgress.getDefaultInstance();
      }
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.SendEgress send_egress = 4;</code>
     */
    public Builder setSendEgress(SendEgress value) {
      if (sendEgressBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        command_ = value;
        onChanged();
      } else {
        sendEgressBuilder_.setMessage(value);
      }
      commandCase_ = 4;
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.SendEgress send_egress = 4;</code>
     */
    public Builder setSendEgress(
        SendEgress.Builder builderForValue) {
      if (sendEgressBuilder_ == null) {
        command_ = builderForValue.build();
        onChanged();
      } else {
        sendEgressBuilder_.setMessage(builderForValue.build());
      }
      commandCase_ = 4;
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.SendEgress send_egress = 4;</code>
     */
    public Builder mergeSendEgress(SendEgress value) {
      if (sendEgressBuilder_ == null) {
        if (commandCase_ == 4 &&
            command_ != SendEgress.getDefaultInstance()) {
          command_ = SendEgress.newBuilder((SendEgress) command_)
              .mergeFrom(value).buildPartial();
        } else {
          command_ = value;
        }
        onChanged();
      } else {
        if (commandCase_ == 4) {
          sendEgressBuilder_.mergeFrom(value);
        }
        sendEgressBuilder_.setMessage(value);
      }
      commandCase_ = 4;
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.SendEgress send_egress = 4;</code>
     */
    public Builder clearSendEgress() {
      if (sendEgressBuilder_ == null) {
        if (commandCase_ == 4) {
          commandCase_ = 0;
          command_ = null;
          onChanged();
        }
      } else {
        if (commandCase_ == 4) {
          commandCase_ = 0;
          command_ = null;
        }
        sendEgressBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.SendEgress send_egress = 4;</code>
     */
    public SendEgress.Builder getSendEgressBuilder() {
      return getSendEgressFieldBuilder().getBuilder();
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.SendEgress send_egress = 4;</code>
     */
    public SendEgressOrBuilder getSendEgressOrBuilder() {
      if ((commandCase_ == 4) && (sendEgressBuilder_ != null)) {
        return sendEgressBuilder_.getMessageOrBuilder();
      } else {
        if (commandCase_ == 4) {
          return (SendEgress) command_;
        }
        return SendEgress.getDefaultInstance();
      }
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.SendEgress send_egress = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        SendEgress, SendEgress.Builder, SendEgressOrBuilder>
        getSendEgressFieldBuilder() {
      if (sendEgressBuilder_ == null) {
        if (!(commandCase_ == 4)) {
          command_ = SendEgress.getDefaultInstance();
        }
        sendEgressBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            SendEgress, SendEgress.Builder, SendEgressOrBuilder>(
                (SendEgress) command_,
                getParentForChildren(),
                isClean());
        command_ = null;
      }
      commandCase_ = 4;
      onChanged();;
      return sendEgressBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        AsyncOperation, AsyncOperation.Builder, AsyncOperationOrBuilder> asyncOperationBuilder_;
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation async_operation = 5;</code>
     */
    public boolean hasAsyncOperation() {
      return commandCase_ == 5;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation async_operation = 5;</code>
     */
    public AsyncOperation getAsyncOperation() {
      if (asyncOperationBuilder_ == null) {
        if (commandCase_ == 5) {
          return (AsyncOperation) command_;
        }
        return AsyncOperation.getDefaultInstance();
      } else {
        if (commandCase_ == 5) {
          return asyncOperationBuilder_.getMessage();
        }
        return AsyncOperation.getDefaultInstance();
      }
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation async_operation = 5;</code>
     */
    public Builder setAsyncOperation(AsyncOperation value) {
      if (asyncOperationBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        command_ = value;
        onChanged();
      } else {
        asyncOperationBuilder_.setMessage(value);
      }
      commandCase_ = 5;
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation async_operation = 5;</code>
     */
    public Builder setAsyncOperation(
        AsyncOperation.Builder builderForValue) {
      if (asyncOperationBuilder_ == null) {
        command_ = builderForValue.build();
        onChanged();
      } else {
        asyncOperationBuilder_.setMessage(builderForValue.build());
      }
      commandCase_ = 5;
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation async_operation = 5;</code>
     */
    public Builder mergeAsyncOperation(AsyncOperation value) {
      if (asyncOperationBuilder_ == null) {
        if (commandCase_ == 5 &&
            command_ != AsyncOperation.getDefaultInstance()) {
          command_ = AsyncOperation.newBuilder((AsyncOperation) command_)
              .mergeFrom(value).buildPartial();
        } else {
          command_ = value;
        }
        onChanged();
      } else {
        if (commandCase_ == 5) {
          asyncOperationBuilder_.mergeFrom(value);
        }
        asyncOperationBuilder_.setMessage(value);
      }
      commandCase_ = 5;
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation async_operation = 5;</code>
     */
    public Builder clearAsyncOperation() {
      if (asyncOperationBuilder_ == null) {
        if (commandCase_ == 5) {
          commandCase_ = 0;
          command_ = null;
          onChanged();
        }
      } else {
        if (commandCase_ == 5) {
          commandCase_ = 0;
          command_ = null;
        }
        asyncOperationBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation async_operation = 5;</code>
     */
    public AsyncOperation.Builder getAsyncOperationBuilder() {
      return getAsyncOperationFieldBuilder().getBuilder();
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation async_operation = 5;</code>
     */
    public AsyncOperationOrBuilder getAsyncOperationOrBuilder() {
      if ((commandCase_ == 5) && (asyncOperationBuilder_ != null)) {
        return asyncOperationBuilder_.getMessageOrBuilder();
      } else {
        if (commandCase_ == 5) {
          return (AsyncOperation) command_;
        }
        return AsyncOperation.getDefaultInstance();
      }
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation async_operation = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        AsyncOperation, AsyncOperation.Builder, AsyncOperationOrBuilder>
        getAsyncOperationFieldBuilder() {
      if (asyncOperationBuilder_ == null) {
        if (!(commandCase_ == 5)) {
          command_ = AsyncOperation.getDefaultInstance();
        }
        asyncOperationBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            AsyncOperation, AsyncOperation.Builder, AsyncOperationOrBuilder>(
                (AsyncOperation) command_,
                getParentForChildren(),
                isClean());
        command_ = null;
      }
      commandCase_ = 5;
      onChanged();;
      return asyncOperationBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        Verify, Verify.Builder, VerifyOrBuilder> verifyBuilder_;
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.Verify verify = 6;</code>
     */
    public boolean hasVerify() {
      return commandCase_ == 6;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.Verify verify = 6;</code>
     */
    public Verify getVerify() {
      if (verifyBuilder_ == null) {
        if (commandCase_ == 6) {
          return (Verify) command_;
        }
        return Verify.getDefaultInstance();
      } else {
        if (commandCase_ == 6) {
          return verifyBuilder_.getMessage();
        }
        return Verify.getDefaultInstance();
      }
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.Verify verify = 6;</code>
     */
    public Builder setVerify(Verify value) {
      if (verifyBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        command_ = value;
        onChanged();
      } else {
        verifyBuilder_.setMessage(value);
      }
      commandCase_ = 6;
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.Verify verify = 6;</code>
     */
    public Builder setVerify(
        Verify.Builder builderForValue) {
      if (verifyBuilder_ == null) {
        command_ = builderForValue.build();
        onChanged();
      } else {
        verifyBuilder_.setMessage(builderForValue.build());
      }
      commandCase_ = 6;
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.Verify verify = 6;</code>
     */
    public Builder mergeVerify(Verify value) {
      if (verifyBuilder_ == null) {
        if (commandCase_ == 6 &&
            command_ != Verify.getDefaultInstance()) {
          command_ = Verify.newBuilder((Verify) command_)
              .mergeFrom(value).buildPartial();
        } else {
          command_ = value;
        }
        onChanged();
      } else {
        if (commandCase_ == 6) {
          verifyBuilder_.mergeFrom(value);
        }
        verifyBuilder_.setMessage(value);
      }
      commandCase_ = 6;
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.Verify verify = 6;</code>
     */
    public Builder clearVerify() {
      if (verifyBuilder_ == null) {
        if (commandCase_ == 6) {
          commandCase_ = 0;
          command_ = null;
          onChanged();
        }
      } else {
        if (commandCase_ == 6) {
          commandCase_ = 0;
          command_ = null;
        }
        verifyBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.Verify verify = 6;</code>
     */
    public Verify.Builder getVerifyBuilder() {
      return getVerifyFieldBuilder().getBuilder();
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.Verify verify = 6;</code>
     */
    public VerifyOrBuilder getVerifyOrBuilder() {
      if ((commandCase_ == 6) && (verifyBuilder_ != null)) {
        return verifyBuilder_.getMessageOrBuilder();
      } else {
        if (commandCase_ == 6) {
          return (Verify) command_;
        }
        return Verify.getDefaultInstance();
      }
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.Verify verify = 6;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        Verify, Verify.Builder, VerifyOrBuilder>
        getVerifyFieldBuilder() {
      if (verifyBuilder_ == null) {
        if (!(commandCase_ == 6)) {
          command_ = Verify.getDefaultInstance();
        }
        verifyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            Verify, Verify.Builder, VerifyOrBuilder>(
                (Verify) command_,
                getParentForChildren(),
                isClean());
        command_ = null;
      }
      commandCase_ = 6;
      onChanged();;
      return verifyBuilder_;
    }
    @Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:org.apache.flink.statefun.e2e.smoke.Command)
  }

  // @@protoc_insertion_point(class_scope:org.apache.flink.statefun.e2e.smoke.Command)
  private static final Command DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new Command();
  }

  public static Command getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Command>
      PARSER = new com.google.protobuf.AbstractParser<Command>() {
    @Override
    public Command parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Command(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Command> parser() {
    return PARSER;
  }

  @Override
  public com.google.protobuf.Parser<Command> getParserForType() {
    return PARSER;
  }

  @Override
  public Command getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

