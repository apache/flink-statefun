//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.3
// source: ridesharing.proto

package main

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// the messages that corresponds to the FROM_PASSENGER_INGRESS
type InboundPassengerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PassengerId string `protobuf:"bytes,1,opt,name=passenger_id,json=passengerId,proto3" json:"passenger_id,omitempty"`
	// Types that are assignable to Message:
	//	*InboundPassengerMessage_RequestRide_
	Message isInboundPassengerMessage_Message `protobuf_oneof:"message"`
}

func (x *InboundPassengerMessage) Reset() {
	*x = InboundPassengerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ridesharing_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InboundPassengerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InboundPassengerMessage) ProtoMessage() {}

func (x *InboundPassengerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ridesharing_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InboundPassengerMessage.ProtoReflect.Descriptor instead.
func (*InboundPassengerMessage) Descriptor() ([]byte, []int) {
	return file_ridesharing_proto_rawDescGZIP(), []int{0}
}

func (x *InboundPassengerMessage) GetPassengerId() string {
	if x != nil {
		return x.PassengerId
	}
	return ""
}

func (m *InboundPassengerMessage) GetMessage() isInboundPassengerMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *InboundPassengerMessage) GetRequestRide() *InboundPassengerMessage_RequestRide {
	if x, ok := x.GetMessage().(*InboundPassengerMessage_RequestRide_); ok {
		return x.RequestRide
	}
	return nil
}

type isInboundPassengerMessage_Message interface {
	isInboundPassengerMessage_Message()
}

type InboundPassengerMessage_RequestRide_ struct {
	RequestRide *InboundPassengerMessage_RequestRide `protobuf:"bytes,2,opt,name=request_ride,json=requestRide,proto3,oneof"`
}

func (*InboundPassengerMessage_RequestRide_) isInboundPassengerMessage_Message() {}

// the messages that corresponds to the TO_PASSENGER_EGRESS
type OutboundPassengerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PassengerId string `protobuf:"bytes,1,opt,name=passenger_id,json=passengerId,proto3" json:"passenger_id,omitempty"`
	// Types that are assignable to Message:
	//	*OutboundPassengerMessage_DriverFound
	//	*OutboundPassengerMessage_RideFailed_
	//	*OutboundPassengerMessage_RideStarted_
	//	*OutboundPassengerMessage_RideEnded_
	Message isOutboundPassengerMessage_Message `protobuf_oneof:"message"`
}

func (x *OutboundPassengerMessage) Reset() {
	*x = OutboundPassengerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ridesharing_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutboundPassengerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutboundPassengerMessage) ProtoMessage() {}

func (x *OutboundPassengerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ridesharing_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutboundPassengerMessage.ProtoReflect.Descriptor instead.
func (*OutboundPassengerMessage) Descriptor() ([]byte, []int) {
	return file_ridesharing_proto_rawDescGZIP(), []int{1}
}

func (x *OutboundPassengerMessage) GetPassengerId() string {
	if x != nil {
		return x.PassengerId
	}
	return ""
}

func (m *OutboundPassengerMessage) GetMessage() isOutboundPassengerMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *OutboundPassengerMessage) GetDriverFound() *OutboundPassengerMessage_DriverHasBeenFound {
	if x, ok := x.GetMessage().(*OutboundPassengerMessage_DriverFound); ok {
		return x.DriverFound
	}
	return nil
}

func (x *OutboundPassengerMessage) GetRideFailed() *OutboundPassengerMessage_RideFailed {
	if x, ok := x.GetMessage().(*OutboundPassengerMessage_RideFailed_); ok {
		return x.RideFailed
	}
	return nil
}

func (x *OutboundPassengerMessage) GetRideStarted() *OutboundPassengerMessage_RideStarted {
	if x, ok := x.GetMessage().(*OutboundPassengerMessage_RideStarted_); ok {
		return x.RideStarted
	}
	return nil
}

func (x *OutboundPassengerMessage) GetRideEnded() *OutboundPassengerMessage_RideEnded {
	if x, ok := x.GetMessage().(*OutboundPassengerMessage_RideEnded_); ok {
		return x.RideEnded
	}
	return nil
}

type isOutboundPassengerMessage_Message interface {
	isOutboundPassengerMessage_Message()
}

type OutboundPassengerMessage_DriverFound struct {
	DriverFound *OutboundPassengerMessage_DriverHasBeenFound `protobuf:"bytes,2,opt,name=driver_found,json=driverFound,proto3,oneof"`
}

type OutboundPassengerMessage_RideFailed_ struct {
	RideFailed *OutboundPassengerMessage_RideFailed `protobuf:"bytes,3,opt,name=ride_failed,json=rideFailed,proto3,oneof"`
}

type OutboundPassengerMessage_RideStarted_ struct {
	RideStarted *OutboundPassengerMessage_RideStarted `protobuf:"bytes,4,opt,name=ride_started,json=rideStarted,proto3,oneof"`
}

type OutboundPassengerMessage_RideEnded_ struct {
	RideEnded *OutboundPassengerMessage_RideEnded `protobuf:"bytes,5,opt,name=ride_ended,json=rideEnded,proto3,oneof"`
}

func (*OutboundPassengerMessage_DriverFound) isOutboundPassengerMessage_Message() {}

func (*OutboundPassengerMessage_RideFailed_) isOutboundPassengerMessage_Message() {}

func (*OutboundPassengerMessage_RideStarted_) isOutboundPassengerMessage_Message() {}

func (*OutboundPassengerMessage_RideEnded_) isOutboundPassengerMessage_Message() {}

// the messages that corresponds to the FROM_DRIVER_INGRESS
type InboundDriverMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DriverId string `protobuf:"bytes,1,opt,name=driver_id,json=driverId,proto3" json:"driver_id,omitempty"`
	// Types that are assignable to Message:
	//	*InboundDriverMessage_RideStarted_
	//	*InboundDriverMessage_RideEnded_
	//	*InboundDriverMessage_LocationUpdate_
	Message isInboundDriverMessage_Message `protobuf_oneof:"message"`
}

func (x *InboundDriverMessage) Reset() {
	*x = InboundDriverMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ridesharing_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InboundDriverMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InboundDriverMessage) ProtoMessage() {}

func (x *InboundDriverMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ridesharing_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InboundDriverMessage.ProtoReflect.Descriptor instead.
func (*InboundDriverMessage) Descriptor() ([]byte, []int) {
	return file_ridesharing_proto_rawDescGZIP(), []int{2}
}

func (x *InboundDriverMessage) GetDriverId() string {
	if x != nil {
		return x.DriverId
	}
	return ""
}

func (m *InboundDriverMessage) GetMessage() isInboundDriverMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *InboundDriverMessage) GetRideStarted() *InboundDriverMessage_RideStarted {
	if x, ok := x.GetMessage().(*InboundDriverMessage_RideStarted_); ok {
		return x.RideStarted
	}
	return nil
}

func (x *InboundDriverMessage) GetRideEnded() *InboundDriverMessage_RideEnded {
	if x, ok := x.GetMessage().(*InboundDriverMessage_RideEnded_); ok {
		return x.RideEnded
	}
	return nil
}

func (x *InboundDriverMessage) GetLocationUpdate() *InboundDriverMessage_LocationUpdate {
	if x, ok := x.GetMessage().(*InboundDriverMessage_LocationUpdate_); ok {
		return x.LocationUpdate
	}
	return nil
}

type isInboundDriverMessage_Message interface {
	isInboundDriverMessage_Message()
}

type InboundDriverMessage_RideStarted_ struct {
	RideStarted *InboundDriverMessage_RideStarted `protobuf:"bytes,2,opt,name=ride_started,json=rideStarted,proto3,oneof"`
}

type InboundDriverMessage_RideEnded_ struct {
	RideEnded *InboundDriverMessage_RideEnded `protobuf:"bytes,3,opt,name=ride_ended,json=rideEnded,proto3,oneof"`
}

type InboundDriverMessage_LocationUpdate_ struct {
	LocationUpdate *InboundDriverMessage_LocationUpdate `protobuf:"bytes,4,opt,name=location_update,json=locationUpdate,proto3,oneof"`
}

func (*InboundDriverMessage_RideStarted_) isInboundDriverMessage_Message() {}

func (*InboundDriverMessage_RideEnded_) isInboundDriverMessage_Message() {}

func (*InboundDriverMessage_LocationUpdate_) isInboundDriverMessage_Message() {}

// the messages that corresponds to the TO_DRIVER_EGRESS
type OutboundDriverMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DriverId string `protobuf:"bytes,1,opt,name=driver_id,json=driverId,proto3" json:"driver_id,omitempty"`
	// Types that are assignable to Message:
	//	*OutboundDriverMessage_PickupPassenger_
	Message isOutboundDriverMessage_Message `protobuf_oneof:"message"`
}

func (x *OutboundDriverMessage) Reset() {
	*x = OutboundDriverMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ridesharing_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutboundDriverMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutboundDriverMessage) ProtoMessage() {}

func (x *OutboundDriverMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ridesharing_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutboundDriverMessage.ProtoReflect.Descriptor instead.
func (*OutboundDriverMessage) Descriptor() ([]byte, []int) {
	return file_ridesharing_proto_rawDescGZIP(), []int{3}
}

func (x *OutboundDriverMessage) GetDriverId() string {
	if x != nil {
		return x.DriverId
	}
	return ""
}

func (m *OutboundDriverMessage) GetMessage() isOutboundDriverMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *OutboundDriverMessage) GetPickupPassenger() *OutboundDriverMessage_PickupPassenger {
	if x, ok := x.GetMessage().(*OutboundDriverMessage_PickupPassenger_); ok {
		return x.PickupPassenger
	}
	return nil
}

type isOutboundDriverMessage_Message interface {
	isOutboundDriverMessage_Message()
}

type OutboundDriverMessage_PickupPassenger_ struct {
	PickupPassenger *OutboundDriverMessage_PickupPassenger `protobuf:"bytes,2,opt,name=pickup_passenger,json=pickupPassenger,proto3,oneof"`
}

func (*OutboundDriverMessage_PickupPassenger_) isOutboundDriverMessage_Message() {}

type DriverJoinsRide struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DriverId       string `protobuf:"bytes,1,opt,name=driver_id,json=driverId,proto3" json:"driver_id,omitempty"`
	PassengerId    string `protobuf:"bytes,2,opt,name=passenger_id,json=passengerId,proto3" json:"passenger_id,omitempty"`
	DriverLocation int32  `protobuf:"varint,3,opt,name=driver_location,json=driverLocation,proto3" json:"driver_location,omitempty"`
}

func (x *DriverJoinsRide) Reset() {
	*x = DriverJoinsRide{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ridesharing_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DriverJoinsRide) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriverJoinsRide) ProtoMessage() {}

func (x *DriverJoinsRide) ProtoReflect() protoreflect.Message {
	mi := &file_ridesharing_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DriverJoinsRide.ProtoReflect.Descriptor instead.
func (*DriverJoinsRide) Descriptor() ([]byte, []int) {
	return file_ridesharing_proto_rawDescGZIP(), []int{4}
}

func (x *DriverJoinsRide) GetDriverId() string {
	if x != nil {
		return x.DriverId
	}
	return ""
}

func (x *DriverJoinsRide) GetPassengerId() string {
	if x != nil {
		return x.PassengerId
	}
	return ""
}

func (x *DriverJoinsRide) GetDriverLocation() int32 {
	if x != nil {
		return x.DriverLocation
	}
	return 0
}

type PassengerJoinsRide struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PassengerId  string `protobuf:"bytes,1,opt,name=passenger_id,json=passengerId,proto3" json:"passenger_id,omitempty"`
	StartGeoCell int32  `protobuf:"varint,2,opt,name=start_geo_cell,json=startGeoCell,proto3" json:"start_geo_cell,omitempty"`
	EndGeoCell   int32  `protobuf:"varint,3,opt,name=end_geo_cell,json=endGeoCell,proto3" json:"end_geo_cell,omitempty"`
}

func (x *PassengerJoinsRide) Reset() {
	*x = PassengerJoinsRide{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ridesharing_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassengerJoinsRide) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassengerJoinsRide) ProtoMessage() {}

func (x *PassengerJoinsRide) ProtoReflect() protoreflect.Message {
	mi := &file_ridesharing_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassengerJoinsRide.ProtoReflect.Descriptor instead.
func (*PassengerJoinsRide) Descriptor() ([]byte, []int) {
	return file_ridesharing_proto_rawDescGZIP(), []int{5}
}

func (x *PassengerJoinsRide) GetPassengerId() string {
	if x != nil {
		return x.PassengerId
	}
	return ""
}

func (x *PassengerJoinsRide) GetStartGeoCell() int32 {
	if x != nil {
		return x.StartGeoCell
	}
	return 0
}

func (x *PassengerJoinsRide) GetEndGeoCell() int32 {
	if x != nil {
		return x.EndGeoCell
	}
	return 0
}

type RideStarted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DriverId      string `protobuf:"bytes,1,opt,name=driver_id,json=driverId,proto3" json:"driver_id,omitempty"`
	DriverGeoCell int32  `protobuf:"varint,2,opt,name=driver_geo_cell,json=driverGeoCell,proto3" json:"driver_geo_cell,omitempty"`
}

func (x *RideStarted) Reset() {
	*x = RideStarted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ridesharing_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RideStarted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RideStarted) ProtoMessage() {}

func (x *RideStarted) ProtoReflect() protoreflect.Message {
	mi := &file_ridesharing_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RideStarted.ProtoReflect.Descriptor instead.
func (*RideStarted) Descriptor() ([]byte, []int) {
	return file_ridesharing_proto_rawDescGZIP(), []int{6}
}

func (x *RideStarted) GetDriverId() string {
	if x != nil {
		return x.DriverId
	}
	return ""
}

func (x *RideStarted) GetDriverGeoCell() int32 {
	if x != nil {
		return x.DriverGeoCell
	}
	return 0
}

type RideFailed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RideId string `protobuf:"bytes,1,opt,name=ride_id,json=rideId,proto3" json:"ride_id,omitempty"`
}

func (x *RideFailed) Reset() {
	*x = RideFailed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ridesharing_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RideFailed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RideFailed) ProtoMessage() {}

func (x *RideFailed) ProtoReflect() protoreflect.Message {
	mi := &file_ridesharing_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RideFailed.ProtoReflect.Descriptor instead.
func (*RideFailed) Descriptor() ([]byte, []int) {
	return file_ridesharing_proto_rawDescGZIP(), []int{7}
}

func (x *RideFailed) GetRideId() string {
	if x != nil {
		return x.RideId
	}
	return ""
}

type RideEnded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RideEnded) Reset() {
	*x = RideEnded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ridesharing_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RideEnded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RideEnded) ProtoMessage() {}

func (x *RideEnded) ProtoReflect() protoreflect.Message {
	mi := &file_ridesharing_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RideEnded.ProtoReflect.Descriptor instead.
func (*RideEnded) Descriptor() ([]byte, []int) {
	return file_ridesharing_proto_rawDescGZIP(), []int{8}
}

type JoinCell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *JoinCell) Reset() {
	*x = JoinCell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ridesharing_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinCell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinCell) ProtoMessage() {}

func (x *JoinCell) ProtoReflect() protoreflect.Message {
	mi := &file_ridesharing_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinCell.ProtoReflect.Descriptor instead.
func (*JoinCell) Descriptor() ([]byte, []int) {
	return file_ridesharing_proto_rawDescGZIP(), []int{9}
}

type LeaveCell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LeaveCell) Reset() {
	*x = LeaveCell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ridesharing_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaveCell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveCell) ProtoMessage() {}

func (x *LeaveCell) ProtoReflect() protoreflect.Message {
	mi := &file_ridesharing_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveCell.ProtoReflect.Descriptor instead.
func (*LeaveCell) Descriptor() ([]byte, []int) {
	return file_ridesharing_proto_rawDescGZIP(), []int{10}
}

type GetDriver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetDriver) Reset() {
	*x = GetDriver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ridesharing_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDriver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDriver) ProtoMessage() {}

func (x *GetDriver) ProtoReflect() protoreflect.Message {
	mi := &file_ridesharing_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDriver.ProtoReflect.Descriptor instead.
func (*GetDriver) Descriptor() ([]byte, []int) {
	return file_ridesharing_proto_rawDescGZIP(), []int{11}
}

type DriverInCell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DriverId string `protobuf:"bytes,1,opt,name=driver_id,json=driverId,proto3" json:"driver_id,omitempty"`
}

func (x *DriverInCell) Reset() {
	*x = DriverInCell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ridesharing_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DriverInCell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriverInCell) ProtoMessage() {}

func (x *DriverInCell) ProtoReflect() protoreflect.Message {
	mi := &file_ridesharing_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DriverInCell.ProtoReflect.Descriptor instead.
func (*DriverInCell) Descriptor() ([]byte, []int) {
	return file_ridesharing_proto_rawDescGZIP(), []int{12}
}

func (x *DriverInCell) GetDriverId() string {
	if x != nil {
		return x.DriverId
	}
	return ""
}

type PickupPassenger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DriverId           string `protobuf:"bytes,1,opt,name=driver_id,json=driverId,proto3" json:"driver_id,omitempty"`
	PassengerId        string `protobuf:"bytes,2,opt,name=passenger_id,json=passengerId,proto3" json:"passenger_id,omitempty"`
	PassengerStartCell int32  `protobuf:"varint,3,opt,name=passenger_start_cell,json=passengerStartCell,proto3" json:"passenger_start_cell,omitempty"`
	PassengerEndCell   int32  `protobuf:"varint,4,opt,name=passenger_end_cell,json=passengerEndCell,proto3" json:"passenger_end_cell,omitempty"`
}

func (x *PickupPassenger) Reset() {
	*x = PickupPassenger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ridesharing_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PickupPassenger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PickupPassenger) ProtoMessage() {}

func (x *PickupPassenger) ProtoReflect() protoreflect.Message {
	mi := &file_ridesharing_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PickupPassenger.ProtoReflect.Descriptor instead.
func (*PickupPassenger) Descriptor() ([]byte, []int) {
	return file_ridesharing_proto_rawDescGZIP(), []int{13}
}

func (x *PickupPassenger) GetDriverId() string {
	if x != nil {
		return x.DriverId
	}
	return ""
}

func (x *PickupPassenger) GetPassengerId() string {
	if x != nil {
		return x.PassengerId
	}
	return ""
}

func (x *PickupPassenger) GetPassengerStartCell() int32 {
	if x != nil {
		return x.PassengerStartCell
	}
	return 0
}

func (x *PickupPassenger) GetPassengerEndCell() int32 {
	if x != nil {
		return x.PassengerEndCell
	}
	return 0
}

type DriverRejectsPickup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DriverId string `protobuf:"bytes,1,opt,name=driver_id,json=driverId,proto3" json:"driver_id,omitempty"`
	RideId   string `protobuf:"bytes,2,opt,name=ride_id,json=rideId,proto3" json:"ride_id,omitempty"`
}

func (x *DriverRejectsPickup) Reset() {
	*x = DriverRejectsPickup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ridesharing_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DriverRejectsPickup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriverRejectsPickup) ProtoMessage() {}

func (x *DriverRejectsPickup) ProtoReflect() protoreflect.Message {
	mi := &file_ridesharing_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DriverRejectsPickup.ProtoReflect.Descriptor instead.
func (*DriverRejectsPickup) Descriptor() ([]byte, []int) {
	return file_ridesharing_proto_rawDescGZIP(), []int{14}
}

func (x *DriverRejectsPickup) GetDriverId() string {
	if x != nil {
		return x.DriverId
	}
	return ""
}

func (x *DriverRejectsPickup) GetRideId() string {
	if x != nil {
		return x.RideId
	}
	return ""
}

type GeoCellState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DriverId map[string]bool `protobuf:"bytes,1,rep,name=driver_id,json=driverId,proto3" json:"driver_id,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *GeoCellState) Reset() {
	*x = GeoCellState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ridesharing_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoCellState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoCellState) ProtoMessage() {}

func (x *GeoCellState) ProtoReflect() protoreflect.Message {
	mi := &file_ridesharing_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoCellState.ProtoReflect.Descriptor instead.
func (*GeoCellState) Descriptor() ([]byte, []int) {
	return file_ridesharing_proto_rawDescGZIP(), []int{15}
}

func (x *GeoCellState) GetDriverId() map[string]bool {
	if x != nil {
		return x.DriverId
	}
	return nil
}

type CurrentRide struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RideId string `protobuf:"bytes,1,opt,name=rideId,proto3" json:"rideId,omitempty"`
}

func (x *CurrentRide) Reset() {
	*x = CurrentRide{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ridesharing_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentRide) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentRide) ProtoMessage() {}

func (x *CurrentRide) ProtoReflect() protoreflect.Message {
	mi := &file_ridesharing_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentRide.ProtoReflect.Descriptor instead.
func (*CurrentRide) Descriptor() ([]byte, []int) {
	return file_ridesharing_proto_rawDescGZIP(), []int{16}
}

func (x *CurrentRide) GetRideId() string {
	if x != nil {
		return x.RideId
	}
	return ""
}

type CurrentLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location int32 `protobuf:"varint,1,opt,name=dLocation,proto3" json:"dLocation,omitempty"`
}

func (x *CurrentLocation) Reset() {
	*x = CurrentLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ridesharing_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentLocation) ProtoMessage() {}

func (x *CurrentLocation) ProtoReflect() protoreflect.Message {
	mi := &file_ridesharing_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentLocation.ProtoReflect.Descriptor instead.
func (*CurrentLocation) Descriptor() ([]byte, []int) {
	return file_ridesharing_proto_rawDescGZIP(), []int{17}
}

func (x *CurrentLocation) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type CurrentDriver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DriverId string `protobuf:"bytes,1,opt,name=driverId,proto3" json:"driverId,omitempty"`
}

func (x *CurrentDriver) Reset() {
	*x = CurrentDriver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ridesharing_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentDriver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentDriver) ProtoMessage() {}

func (x *CurrentDriver) ProtoReflect() protoreflect.Message {
	mi := &file_ridesharing_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentDriver.ProtoReflect.Descriptor instead.
func (*CurrentDriver) Descriptor() ([]byte, []int) {
	return file_ridesharing_proto_rawDescGZIP(), []int{18}
}

func (x *CurrentDriver) GetDriverId() string {
	if x != nil {
		return x.DriverId
	}
	return ""
}

// A message sent by the physical rDriver to the ridesharing statefun job, indicating that the user
// would like to be picked up from start_geo_cell and dropped off at end_geo_cell
type InboundPassengerMessage_RequestRide struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartGeoCell int32 `protobuf:"varint,2,opt,name=start_geo_cell,json=startGeoCell,proto3" json:"start_geo_cell,omitempty"`
	EndGeoCell   int32 `protobuf:"varint,3,opt,name=end_geo_cell,json=endGeoCell,proto3" json:"end_geo_cell,omitempty"`
}

func (x *InboundPassengerMessage_RequestRide) Reset() {
	*x = InboundPassengerMessage_RequestRide{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ridesharing_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InboundPassengerMessage_RequestRide) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InboundPassengerMessage_RequestRide) ProtoMessage() {}

func (x *InboundPassengerMessage_RequestRide) ProtoReflect() protoreflect.Message {
	mi := &file_ridesharing_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InboundPassengerMessage_RequestRide.ProtoReflect.Descriptor instead.
func (*InboundPassengerMessage_RequestRide) Descriptor() ([]byte, []int) {
	return file_ridesharing_proto_rawDescGZIP(), []int{0, 0}
}

func (x *InboundPassengerMessage_RequestRide) GetStartGeoCell() int32 {
	if x != nil {
		return x.StartGeoCell
	}
	return 0
}

func (x *InboundPassengerMessage_RequestRide) GetEndGeoCell() int32 {
	if x != nil {
		return x.EndGeoCell
	}
	return 0
}

// A message that is sent to the rPassenger, when there is a rDriver that
// is ready to pick them up.
type OutboundPassengerMessage_DriverHasBeenFound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DriverId      string `protobuf:"bytes,2,opt,name=driver_id,json=driverId,proto3" json:"driver_id,omitempty"`
	DriverGeoCell int32  `protobuf:"varint,3,opt,name=driver_geo_cell,json=driverGeoCell,proto3" json:"driver_geo_cell,omitempty"`
}

func (x *OutboundPassengerMessage_DriverHasBeenFound) Reset() {
	*x = OutboundPassengerMessage_DriverHasBeenFound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ridesharing_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutboundPassengerMessage_DriverHasBeenFound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutboundPassengerMessage_DriverHasBeenFound) ProtoMessage() {}

func (x *OutboundPassengerMessage_DriverHasBeenFound) ProtoReflect() protoreflect.Message {
	mi := &file_ridesharing_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutboundPassengerMessage_DriverHasBeenFound.ProtoReflect.Descriptor instead.
func (*OutboundPassengerMessage_DriverHasBeenFound) Descriptor() ([]byte, []int) {
	return file_ridesharing_proto_rawDescGZIP(), []int{1, 0}
}

func (x *OutboundPassengerMessage_DriverHasBeenFound) GetDriverId() string {
	if x != nil {
		return x.DriverId
	}
	return ""
}

func (x *OutboundPassengerMessage_DriverHasBeenFound) GetDriverGeoCell() int32 {
	if x != nil {
		return x.DriverGeoCell
	}
	return 0
}

// A message that is sent to the rPassenger when the system couldn't find in reasonable time
// a rDriver to pickup the rPassenger.
type OutboundPassengerMessage_RideFailed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RideId string `protobuf:"bytes,2,opt,name=ride_id,json=rideId,proto3" json:"ride_id,omitempty"`
}

func (x *OutboundPassengerMessage_RideFailed) Reset() {
	*x = OutboundPassengerMessage_RideFailed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ridesharing_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutboundPassengerMessage_RideFailed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutboundPassengerMessage_RideFailed) ProtoMessage() {}

func (x *OutboundPassengerMessage_RideFailed) ProtoReflect() protoreflect.Message {
	mi := &file_ridesharing_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutboundPassengerMessage_RideFailed.ProtoReflect.Descriptor instead.
func (*OutboundPassengerMessage_RideFailed) Descriptor() ([]byte, []int) {
	return file_ridesharing_proto_rawDescGZIP(), []int{1, 1}
}

func (x *OutboundPassengerMessage_RideFailed) GetRideId() string {
	if x != nil {
		return x.RideId
	}
	return ""
}

// A notification that is sent to the rPassenger indicating that the dRide has started.
type OutboundPassengerMessage_RideStarted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DriverId string `protobuf:"bytes,2,opt,name=driver_id,json=driverId,proto3" json:"driver_id,omitempty"`
}

func (x *OutboundPassengerMessage_RideStarted) Reset() {
	*x = OutboundPassengerMessage_RideStarted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ridesharing_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutboundPassengerMessage_RideStarted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutboundPassengerMessage_RideStarted) ProtoMessage() {}

func (x *OutboundPassengerMessage_RideStarted) ProtoReflect() protoreflect.Message {
	mi := &file_ridesharing_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutboundPassengerMessage_RideStarted.ProtoReflect.Descriptor instead.
func (*OutboundPassengerMessage_RideStarted) Descriptor() ([]byte, []int) {
	return file_ridesharing_proto_rawDescGZIP(), []int{1, 2}
}

func (x *OutboundPassengerMessage_RideStarted) GetDriverId() string {
	if x != nil {
		return x.DriverId
	}
	return ""
}

// A notification that is sent to the rPassenger indicating that the dRide has end.
type OutboundPassengerMessage_RideEnded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OutboundPassengerMessage_RideEnded) Reset() {
	*x = OutboundPassengerMessage_RideEnded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ridesharing_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutboundPassengerMessage_RideEnded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutboundPassengerMessage_RideEnded) ProtoMessage() {}

func (x *OutboundPassengerMessage_RideEnded) ProtoReflect() protoreflect.Message {
	mi := &file_ridesharing_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutboundPassengerMessage_RideEnded.ProtoReflect.Descriptor instead.
func (*OutboundPassengerMessage_RideEnded) Descriptor() ([]byte, []int) {
	return file_ridesharing_proto_rawDescGZIP(), []int{1, 3}
}

// A message the rDriver sends once they pickup the rPassenger
type InboundDriverMessage_RideStarted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InboundDriverMessage_RideStarted) Reset() {
	*x = InboundDriverMessage_RideStarted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ridesharing_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InboundDriverMessage_RideStarted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InboundDriverMessage_RideStarted) ProtoMessage() {}

func (x *InboundDriverMessage_RideStarted) ProtoReflect() protoreflect.Message {
	mi := &file_ridesharing_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InboundDriverMessage_RideStarted.ProtoReflect.Descriptor instead.
func (*InboundDriverMessage_RideStarted) Descriptor() ([]byte, []int) {
	return file_ridesharing_proto_rawDescGZIP(), []int{2, 0}
}

// A message the rDriver sends when they drop off the rPassenger.
type InboundDriverMessage_RideEnded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RideId string `protobuf:"bytes,2,opt,name=ride_id,json=rideId,proto3" json:"ride_id,omitempty"`
}

func (x *InboundDriverMessage_RideEnded) Reset() {
	*x = InboundDriverMessage_RideEnded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ridesharing_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InboundDriverMessage_RideEnded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InboundDriverMessage_RideEnded) ProtoMessage() {}

func (x *InboundDriverMessage_RideEnded) ProtoReflect() protoreflect.Message {
	mi := &file_ridesharing_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InboundDriverMessage_RideEnded.ProtoReflect.Descriptor instead.
func (*InboundDriverMessage_RideEnded) Descriptor() ([]byte, []int) {
	return file_ridesharing_proto_rawDescGZIP(), []int{2, 1}
}

func (x *InboundDriverMessage_RideEnded) GetRideId() string {
	if x != nil {
		return x.RideId
	}
	return ""
}

// A periodic dLocation update message
type InboundDriverMessage_LocationUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentGeoCell int32 `protobuf:"varint,2,opt,name=current_geo_cell,json=currentGeoCell,proto3" json:"current_geo_cell,omitempty"`
}

func (x *InboundDriverMessage_LocationUpdate) Reset() {
	*x = InboundDriverMessage_LocationUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ridesharing_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InboundDriverMessage_LocationUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InboundDriverMessage_LocationUpdate) ProtoMessage() {}

func (x *InboundDriverMessage_LocationUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_ridesharing_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InboundDriverMessage_LocationUpdate.ProtoReflect.Descriptor instead.
func (*InboundDriverMessage_LocationUpdate) Descriptor() ([]byte, []int) {
	return file_ridesharing_proto_rawDescGZIP(), []int{2, 2}
}

func (x *InboundDriverMessage_LocationUpdate) GetCurrentGeoCell() int32 {
	if x != nil {
		return x.CurrentGeoCell
	}
	return 0
}

// A message that is sent to the physical rDriver to indicate that
// a pickup is needed.
// a pickup is needed.
type OutboundDriverMessage_PickupPassenger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RideId           string `protobuf:"bytes,2,opt,name=ride_id,json=rideId,proto3" json:"ride_id,omitempty"`
	StartGeoLocation int32  `protobuf:"varint,3,opt,name=start_geo_location,json=startGeoLocation,proto3" json:"start_geo_location,omitempty"`
	EndGeoLocation   int32  `protobuf:"varint,4,opt,name=end_geo_location,json=endGeoLocation,proto3" json:"end_geo_location,omitempty"`
}

func (x *OutboundDriverMessage_PickupPassenger) Reset() {
	*x = OutboundDriverMessage_PickupPassenger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ridesharing_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutboundDriverMessage_PickupPassenger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutboundDriverMessage_PickupPassenger) ProtoMessage() {}

func (x *OutboundDriverMessage_PickupPassenger) ProtoReflect() protoreflect.Message {
	mi := &file_ridesharing_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutboundDriverMessage_PickupPassenger.ProtoReflect.Descriptor instead.
func (*OutboundDriverMessage_PickupPassenger) Descriptor() ([]byte, []int) {
	return file_ridesharing_proto_rawDescGZIP(), []int{3, 0}
}

func (x *OutboundDriverMessage_PickupPassenger) GetRideId() string {
	if x != nil {
		return x.RideId
	}
	return ""
}

func (x *OutboundDriverMessage_PickupPassenger) GetStartGeoLocation() int32 {
	if x != nil {
		return x.StartGeoLocation
	}
	return 0
}

func (x *OutboundDriverMessage_PickupPassenger) GetEndGeoLocation() int32 {
	if x != nil {
		return x.EndGeoLocation
	}
	return 0
}

var File_ridesharing_proto protoreflect.FileDescriptor

var file_ridesharing_proto_rawDesc = []byte{
	0x0a, 0x11, 0x72, 0x69, 0x64, 0x65, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x72, 0x69, 0x64, 0x65, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x22, 0xf5, 0x01, 0x0a, 0x17, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x61, 0x73, 0x73,
	0x65, 0x6e, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x55, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x69, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x72, 0x69, 0x64, 0x65, 0x73, 0x68, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x61, 0x73, 0x73, 0x65,
	0x6e, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x69, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x69, 0x64, 0x65, 0x1a, 0x55, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x69, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x67,
	0x65, 0x6f, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x47, 0x65, 0x6f, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x65,
	0x6e, 0x64, 0x5f, 0x67, 0x65, 0x6f, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x47, 0x65, 0x6f, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x09, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xe1, 0x04, 0x0a, 0x18, 0x4f, 0x75, 0x74,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x73,
	0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x5d, 0x0a, 0x0c, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x72, 0x69, 0x64, 0x65, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x75, 0x74,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x48, 0x61, 0x73, 0x42,
	0x65, 0x65, 0x6e, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x53, 0x0a, 0x0b, 0x72, 0x69, 0x64, 0x65, 0x5f,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x72,
	0x69, 0x64, 0x65, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x75, 0x74, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x50, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x52, 0x69, 0x64, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x48, 0x00,
	0x52, 0x0a, 0x72, 0x69, 0x64, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x56, 0x0a, 0x0c,
	0x72, 0x69, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x72, 0x69, 0x64, 0x65, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67,
	0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x69, 0x64, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x69, 0x64, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x12, 0x50, 0x0a, 0x0a, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x72, 0x69, 0x64, 0x65, 0x73,
	0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x50,
	0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x52, 0x69, 0x64, 0x65, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x48, 0x00, 0x52, 0x09, 0x72, 0x69, 0x64,
	0x65, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x1a, 0x59, 0x0a, 0x12, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x48, 0x61, 0x73, 0x42, 0x65, 0x65, 0x6e, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x6f, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x47, 0x65, 0x6f, 0x43, 0x65, 0x6c,
	0x6c, 0x1a, 0x25, 0x0a, 0x0a, 0x52, 0x69, 0x64, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x69, 0x64, 0x65, 0x49, 0x64, 0x1a, 0x2a, 0x0a, 0x0b, 0x52, 0x69, 0x64, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x1a, 0x0b, 0x0a, 0x09, 0x52, 0x69, 0x64, 0x65, 0x45, 0x6e, 0x64, 0x65,
	0x64, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xae, 0x03, 0x0a,
	0x14, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x52, 0x0a, 0x0c, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x69, 0x64, 0x65, 0x73,
	0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x69, 0x64, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x69, 0x64, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x4c, 0x0a, 0x0a, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x72, 0x69, 0x64,
	0x65, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x69,
	0x64, 0x65, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x48, 0x00, 0x52, 0x09, 0x72, 0x69, 0x64, 0x65, 0x45,
	0x6e, 0x64, 0x65, 0x64, 0x12, 0x5b, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x72, 0x69, 0x64, 0x65, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x49, 0x6e, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x1a, 0x0d, 0x0a, 0x0b, 0x52, 0x69, 0x64, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x1a, 0x24, 0x0a, 0x09, 0x52, 0x69, 0x64, 0x65, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x69, 0x64, 0x65, 0x49, 0x64, 0x1a, 0x3a, 0x0a, 0x0e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x6f, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x6f, 0x43, 0x65,
	0x6c, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa5, 0x02,
	0x0a, 0x15, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x5f, 0x0a, 0x10, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x72, 0x69, 0x64, 0x65, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x75, 0x74,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x61, 0x73, 0x73,
	0x65, 0x6e, 0x67, 0x65, 0x72, 0x1a, 0x82, 0x01, 0x0a, 0x0f, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70,
	0x50, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x69, 0x64,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x69, 0x64, 0x65,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x67, 0x65, 0x6f, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x47, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x28, 0x0a, 0x10, 0x65, 0x6e, 0x64, 0x5f, 0x67, 0x65, 0x6f, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x65, 0x6e, 0x64, 0x47,
	0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x7a, 0x0a, 0x0f, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x4a,
	0x6f, 0x69, 0x6e, 0x73, 0x52, 0x69, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x73,
	0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x7f, 0x0a, 0x12, 0x50, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x4a, 0x6f,
	0x69, 0x6e, 0x73, 0x52, 0x69, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x65,
	0x6e, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x67, 0x65, 0x6f, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x47, 0x65, 0x6f, 0x43, 0x65, 0x6c, 0x6c,
	0x12, 0x20, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x67, 0x65, 0x6f, 0x5f, 0x63, 0x65, 0x6c, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x47, 0x65, 0x6f, 0x43, 0x65,
	0x6c, 0x6c, 0x22, 0x52, 0x0a, 0x0b, 0x52, 0x69, 0x64, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x0f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x6f, 0x5f, 0x63, 0x65, 0x6c,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x47,
	0x65, 0x6f, 0x43, 0x65, 0x6c, 0x6c, 0x22, 0x25, 0x0a, 0x0a, 0x52, 0x69, 0x64, 0x65, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x69, 0x64, 0x65, 0x49, 0x64, 0x22, 0x0b, 0x0a,
	0x09, 0x52, 0x69, 0x64, 0x65, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x22, 0x0a, 0x0a, 0x08, 0x4a, 0x6f,
	0x69, 0x6e, 0x43, 0x65, 0x6c, 0x6c, 0x22, 0x0b, 0x0a, 0x09, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43,
	0x65, 0x6c, 0x6c, 0x22, 0x0b, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x22, 0x2b, 0x0a, 0x0c, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x43, 0x65, 0x6c, 0x6c,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb1, 0x01,
	0x0a, 0x0f, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x12, 0x70, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43,
	0x65, 0x6c, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72,
	0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x70, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x43, 0x65, 0x6c,
	0x6c, 0x22, 0x4b, 0x0a, 0x13, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x69, 0x64, 0x65, 0x49, 0x64, 0x22, 0x91,
	0x01, 0x0a, 0x0c, 0x47, 0x65, 0x6f, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x44, 0x0a, 0x09, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x64, 0x65, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x47, 0x65, 0x6f, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x3b, 0x0a, 0x0d, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x25, 0x0a, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x69, 0x64,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x69, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x69, 0x64, 0x65, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x0f, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2b, 0x0a, 0x0d, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x42, 0x42, 0x0a, 0x38, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61,
	0x63, 0x68, 0x65, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x66,
	0x75, 0x6e, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x72, 0x69, 0x64, 0x65,
	0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x50, 0x01, 0x5a, 0x04, 0x6d, 0x61, 0x69, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_ridesharing_proto_rawDescOnce sync.Once
	file_ridesharing_proto_rawDescData = file_ridesharing_proto_rawDesc
)

func file_ridesharing_proto_rawDescGZIP() []byte {
	file_ridesharing_proto_rawDescOnce.Do(func() {
		file_ridesharing_proto_rawDescData = protoimpl.X.CompressGZIP(file_ridesharing_proto_rawDescData)
	})
	return file_ridesharing_proto_rawDescData
}

var file_ridesharing_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_ridesharing_proto_goTypes = []interface{}{
	(*InboundPassengerMessage)(nil),                     // 0: ridesharing.InboundPassengerMessage
	(*OutboundPassengerMessage)(nil),                    // 1: ridesharing.OutboundPassengerMessage
	(*InboundDriverMessage)(nil),                        // 2: ridesharing.InboundDriverMessage
	(*OutboundDriverMessage)(nil),                       // 3: ridesharing.OutboundDriverMessage
	(*DriverJoinsRide)(nil),                             // 4: ridesharing.DriverJoinsRide
	(*PassengerJoinsRide)(nil),                          // 5: ridesharing.PassengerJoinsRide
	(*RideStarted)(nil),                                 // 6: ridesharing.RideStarted
	(*RideFailed)(nil),                                  // 7: ridesharing.RideFailed
	(*RideEnded)(nil),                                   // 8: ridesharing.RideEnded
	(*JoinCell)(nil),                                    // 9: ridesharing.JoinCell
	(*LeaveCell)(nil),                                   // 10: ridesharing.LeaveCell
	(*GetDriver)(nil),                                   // 11: ridesharing.GetDriver
	(*DriverInCell)(nil),                                // 12: ridesharing.DriverInCell
	(*PickupPassenger)(nil),                             // 13: ridesharing.PickupPassenger
	(*DriverRejectsPickup)(nil),                         // 14: ridesharing.DriverRejectsPickup
	(*GeoCellState)(nil),                                // 15: ridesharing.GeoCellState
	(*CurrentRide)(nil),                                 // 16: ridesharing.CurrentRide
	(*CurrentLocation)(nil),                             // 17: ridesharing.CurrentLocation
	(*CurrentDriver)(nil),                               // 18: ridesharing.CurrentDriver
	(*InboundPassengerMessage_RequestRide)(nil),         // 19: ridesharing.InboundPassengerMessage.RequestRide
	(*OutboundPassengerMessage_DriverHasBeenFound)(nil), // 20: ridesharing.OutboundPassengerMessage.DriverHasBeenFound
	(*OutboundPassengerMessage_RideFailed)(nil),         // 21: ridesharing.OutboundPassengerMessage.RideFailed
	(*OutboundPassengerMessage_RideStarted)(nil),        // 22: ridesharing.OutboundPassengerMessage.RideStarted
	(*OutboundPassengerMessage_RideEnded)(nil),          // 23: ridesharing.OutboundPassengerMessage.RideEnded
	(*InboundDriverMessage_RideStarted)(nil),            // 24: ridesharing.InboundDriverMessage.RideStarted
	(*InboundDriverMessage_RideEnded)(nil),              // 25: ridesharing.InboundDriverMessage.RideEnded
	(*InboundDriverMessage_LocationUpdate)(nil),         // 26: ridesharing.InboundDriverMessage.LocationUpdate
	(*OutboundDriverMessage_PickupPassenger)(nil),       // 27: ridesharing.OutboundDriverMessage.PickupPassenger
	nil, // 28: ridesharing.GeoCellState.DriverIdEntry
}
var file_ridesharing_proto_depIdxs = []int32{
	19, // 0: ridesharing.InboundPassengerMessage.request_ride:type_name -> ridesharing.InboundPassengerMessage.RequestRide
	20, // 1: ridesharing.OutboundPassengerMessage.driver_found:type_name -> ridesharing.OutboundPassengerMessage.DriverHasBeenFound
	21, // 2: ridesharing.OutboundPassengerMessage.ride_failed:type_name -> ridesharing.OutboundPassengerMessage.RideFailed
	22, // 3: ridesharing.OutboundPassengerMessage.ride_started:type_name -> ridesharing.OutboundPassengerMessage.RideStarted
	23, // 4: ridesharing.OutboundPassengerMessage.ride_ended:type_name -> ridesharing.OutboundPassengerMessage.RideEnded
	24, // 5: ridesharing.InboundDriverMessage.ride_started:type_name -> ridesharing.InboundDriverMessage.RideStarted
	25, // 6: ridesharing.InboundDriverMessage.ride_ended:type_name -> ridesharing.InboundDriverMessage.RideEnded
	26, // 7: ridesharing.InboundDriverMessage.location_update:type_name -> ridesharing.InboundDriverMessage.LocationUpdate
	27, // 8: ridesharing.OutboundDriverMessage.pickup_passenger:type_name -> ridesharing.OutboundDriverMessage.PickupPassenger
	28, // 9: ridesharing.GeoCellState.driver_id:type_name -> ridesharing.GeoCellState.DriverIdEntry
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_ridesharing_proto_init() }
func file_ridesharing_proto_init() {
	if File_ridesharing_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ridesharing_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InboundPassengerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ridesharing_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutboundPassengerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ridesharing_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InboundDriverMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ridesharing_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutboundDriverMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ridesharing_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DriverJoinsRide); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ridesharing_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassengerJoinsRide); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ridesharing_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RideStarted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ridesharing_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RideFailed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ridesharing_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RideEnded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ridesharing_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinCell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ridesharing_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaveCell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ridesharing_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDriver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ridesharing_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DriverInCell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ridesharing_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PickupPassenger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ridesharing_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DriverRejectsPickup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ridesharing_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoCellState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ridesharing_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrentRide); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ridesharing_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrentLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ridesharing_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrentDriver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ridesharing_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InboundPassengerMessage_RequestRide); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ridesharing_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutboundPassengerMessage_DriverHasBeenFound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ridesharing_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutboundPassengerMessage_RideFailed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ridesharing_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutboundPassengerMessage_RideStarted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ridesharing_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutboundPassengerMessage_RideEnded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ridesharing_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InboundDriverMessage_RideStarted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ridesharing_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InboundDriverMessage_RideEnded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ridesharing_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InboundDriverMessage_LocationUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ridesharing_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutboundDriverMessage_PickupPassenger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ridesharing_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*InboundPassengerMessage_RequestRide_)(nil),
	}
	file_ridesharing_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*OutboundPassengerMessage_DriverFound)(nil),
		(*OutboundPassengerMessage_RideFailed_)(nil),
		(*OutboundPassengerMessage_RideStarted_)(nil),
		(*OutboundPassengerMessage_RideEnded_)(nil),
	}
	file_ridesharing_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*InboundDriverMessage_RideStarted_)(nil),
		(*InboundDriverMessage_RideEnded_)(nil),
		(*InboundDriverMessage_LocationUpdate_)(nil),
	}
	file_ridesharing_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*OutboundDriverMessage_PickupPassenger_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ridesharing_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ridesharing_proto_goTypes,
		DependencyIndexes: file_ridesharing_proto_depIdxs,
		MessageInfos:      file_ridesharing_proto_msgTypes,
	}.Build()
	File_ridesharing_proto = out.File
	file_ridesharing_proto_rawDesc = nil
	file_ridesharing_proto_goTypes = nil
	file_ridesharing_proto_depIdxs = nil
}
